if ! [ RuleExists C.Toolchain ]
{
	C.Use ;
}

JAM_MODULES_PATH += $(JAMFILE_ROOT) ;

PLATFORM ?= $(C.PLATFORM) ;
CONFIG ?= $(C.CONFIG) ;

local platformName = $(PLATFORM) ;
if $(platformName) = * 	{ platformName = _all_ ; }
local configName = $(CONFIG) ;
if $(configName) = * 	{ configName = _all_ ; }
TargetInfoFile = targetinfo.$(platformName).$(configName).lua ;

MakeLocate $(TargetInfoFile) : $(TARGETINFO_LOCATE) ;

EMPTY = "" ;

rule DumpSources prefix : SOURCES
{
	local sources ;
	local source ;
	for source in $(SOURCES:G=$(C.ACTIVE_TOOLCHAIN_TARGET_GRIST)) {
		if ! $(EXCLUDED_FROM_WORKSPACE:Z=$(source)) {
			sources += $(source:G=) ;
		}
	}

	local subdir = $(SUBDIR[1]:R=$(CWD)) ;
	Contents += "$(prefix).Sources = concat($(prefix).Sources, {$(NEWLINE)" ;
			Contents += "$(TAB)[[$(sources:TR=$(subdir))]],$(NEWLINE)" ;
	Contents += "})$(NEWLINE)" ;

	local postHDRS ;
	local postREFERENCEDIRECTORIES ;
	local preDEFINES ;
	local preCCFLAGS ;
	local preC++FLAGS ;
	local preMFLAGS ;
	local preMMFLAGS ;
	local flagsToRemove ;
	local flagsToAdd ;
	local excludePatternsFromBuild ;

	local forceIncludes ;
	on $(C.ACTIVE_TOOLCHAIN_*) {
		postHDRS += $(HDRS) ;
		if $(MSVCNT) {
			local flags = /I /AI ;
			postREFERENCEDIRECTORIES += $(flags)\"$(REFERENCEDIRECTORIES)\" ; #"
		}
		preDEFINES += $(DEFINES) ;
		preCCFLAGS += $(CCFLAGS) ;
		preC++FLAGS += $(C++FLAGS) ;
		preMFLAGS += $(MFLAGS) ;
		preMMFLAGS += $(MMFLAGS) ;
		flagsToRemove += $(FLAGS_TO_REMOVE) ;
		flagsToAdd += $(FLAGS_TO_ADD) ;
		forceIncludes = $(FORCE_INCLUDES) ;
	}

	on $(C.ACTIVE_TOOLCHAIN_TARGET) {
		postHDRS = $(HDRS) $(postHDRS) ;
		if $(MSVCNT) {
			local flags = /I /AI ;
			postREFERENCEDIRECTORIES = $(flags)\"$(REFERENCEDIRECTORIES)\" $(postREFERENCEDIRECTORIES) ; #"
		}
		preDEFINES += $(DEFINES) ;
		preCCFLAGS += $(CCFLAGS) ;
		preC++FLAGS += $(C++FLAGS) ;
		preMFLAGS += $(MFLAGS) ;
		preMMFLAGS += $(MMFLAGS) ;
		flagsToRemove += $(FLAGS_TO_REMOVE) ;
		flagsToAdd += $(FLAGS_TO_ADD) ;
		forceIncludes = $(FORCE_INCLUDES) $(forceIncludes) ;
		excludePatternsFromBuild = $(EXCLUDE_PATTERNS_FROM_BUILD) ;
	}

	SOURCES = [ C._FilterSourcesForCompilableOnly ] ;
	local sufobj = $(SUFOBJ:Z=$(C.COMPILER_SUITE_SYMBOL)) ;
	local source ;
	for source in $(SOURCES) {
		local objTarget = $(source:S=$(sufobj):G=$(C.ACTIVE_TOOLCHAIN_TARGET_GRIST)) ;

		local ext = $(source:S) ;
		local excludedFromBuild = $(EXCLUDED_FROM_BUILD:Z=$(source)) ;
		if ! $(excludedFromBuild) {
			if [ Match ($(excludePatternsFromBuild)) : $(source:G=) ] {
				excludedFromBuild = true ;
			}
		}
		local forceFileType = $(FORCE_FILE_TYPE:Z=$(source)) ;
		local BUILD_EXT = C.BUILD$(forceFileType:E=$(ext)) ;
		local preflags = $($(BUILD_EXT).PREFLAGS:Z=$(C.COMPILER_SUITE_SYMBOL)) ;
		local objflags = $($(preflags)) $($(BUILD_EXT).FLAGS:Z=$(objTarget)) ;
		local objdefines = $(DEFINES:Z=$(objTarget)) ;
		local objincludes = $(HDRS:Z=$(objTarget)) ;
		local objForceIncludes = $(FORCE_INCLUDES:Z=$(objTarget)) ;
		local objectFlagsToRemove = $(FLAGS_TO_REMOVE:Z=$(objTarget)) ;
		local objectFlagsToAdd = $(FLAGS_TO_ADD:Z=$(objTarget)) ;

		if $(objectFlagsToRemove[1]) {
			objflags -= $(objectFlagsToRemove) ;
		}
		if $(objectFlagsToAdd[1]) {
			objflags += $(objectFlagsToAdd) ;
		}
		local sourceFullPath = $(source:TR=$(subdir)) ;
		local fullprefix = "$(prefix).SourcesInfo[ [[$(sourceFullPath)]] ]" ;
		if $(excludedFromBuild) {
			Contents += "$(fullprefix).ExcludeFromBuild=true$(NEWLINE)" ;
		}
		if $(objdefines) {
			Contents += "$(fullprefix).Defines={@(\"$(objdefines)\":J=,)}$(NEWLINE)" ;
		}
		if $(objflags) {
			local LBRACKETS = "[[" ;
			local RBRACKETS = "]]" ;
			Contents += "$(fullprefix).Flags={@($(LBRACKETS)$(objflags)$(RBRACKETS):J=,)}$(NEWLINE)" ;
		}
		if $(objincludes) {
			Contents += "$(fullprefix).IncludeDirectories={@(\"$(objincludes)\":J=,)}$(NEWLINE)" ;
		}
		if $(objForceIncludes) {
			Contents += "$(fullprefix).ForceIncludes={@(\"$(objForceIncludes:G=)\":J=,)}$(NEWLINE)" ;
		}
		if $(forceFileType) {
			Contents += "$(fullprefix).ForceFileType=\"$(forceFileType)\"$(NEWLINE)" ;
		}
	}
}


rule ProjectGroup TARGET : FOLDERNAME : PROJECTS
{
	#if $(PLATFORM) != *  ||  $(CONFIG) != *  {  return ;  }
	if ! $(FOLDERNAME)  ||  ! $(PROJECTS)  {  return ;  }

	local workspace ;
	for workspace in $(TARGET)
	{
		local prefix = "Workspaces[ [[$(workspace)]] ]" ;
		Contents += "$(prefix).ProjectGroups[ [[$(FOLDERNAME)]] ] = concat($(prefix).ProjectGroups[ [[$(FOLDERNAME)]] ], $(NEWLINE){$(NEWLINE)" ;
		Contents += "$(TAB)$(TAB)[[$(PROJECTS)]],$(NEWLINE)" ;
		Contents += "})$(NEWLINE)" ;
	}
}


rule SourceGroup TARGET : FOLDERNAME : SOURCES {
#	if $(PLATFORM) != *  ||  $(CONFIG) != *  {  return ;  }
	if ! $(FOLDERNAME)  ||  ! $(SOURCES)  {  return ;  }

	TARGET = [ C.ActiveTarget $(TARGET) ] ;
	SOURCES = [ ExpandFileList $(SOURCES) ] ;

	local subdir = $(SUBDIR[1]:R=$(CWD)) ;

	local project ;
	for project in $(TARGET)
	{
		local prefix = "Projects[ [[$(project)]] ]" ;
		Contents += "$(prefix).SourceGroups[ [[$(FOLDERNAME)]] ] = concat($(prefix).SourceGroups[ [[$(FOLDERNAME)]] ], $(NEWLINE){$(NEWLINE)" ;
		Contents += "$(TAB)$(TAB)[[$(SOURCES:TR=$(subdir))]],$(NEWLINE)" ;
		Contents += "})$(NEWLINE)" ;
	}
}


rule AutoSourceGroup TARGET : SOURCES
{
	TARGET = [ C.ActiveTarget $(TARGET) ] ;
	if $(TARGET) = C.* {
		__AutoSourceGroup_Automatic = 1 ;
		return ;
	}

	if ! $(SOURCES)  {  return ;  }

	if $($(TARGET).__AppliedAutoSourceGroup) {
		return ;
	}

	$(TARGET).__AppliedAutoSourceGroup = 1 ;

	SOURCES = [ ExpandFileList $(SOURCES) : 0 ] ;

	local subdir = $(SUBDIR[1]:R=$(CWD)) ;

	local project ;
	for project in $(TARGET)
	{
		local prefix = "Projects[ [[$(project)]] ]" ;

		local lastFolderName ;
		local source ;
		for source in $(SOURCES) {
			local folderName = $(source:D\\) ;
			if $(folderName) {
				if $(lastFolderName) != $(folderName) {
					if $(lastFolderName) {
						Contents += "})$(NEWLINE)" ;
					}
					Contents += "$(prefix).SourceGroups[ [[$(folderName)]] ] = concat($(prefix).SourceGroups[ [[$(folderName)]] ], $(NEWLINE){$(NEWLINE)" ;
					lastFolderName = $(folderName) ;
				}
				Contents += "$(TAB)$(TAB)[[$(source:TR=$(subdir))]],$(NEWLINE)" ;
			}
		}
		if $(lastFolderName) {
			Contents += "})$(NEWLINE)" ;
		}
	}

}


rule ExternalProject TARGET : PROJECT_PATH : OPTIONS {
	local project = "Projects['$(TARGET)']" ;
	Contents += "$(NEWLINE)$(NEWLINE)--------------------------------------------------------------------$(NEWLINE)" ;

	Contents += "$(project).Name = '$(TARGET)'$(NEWLINE)" ;
	Contents += "$(project).Path = [=[$(PROJECT_PATH)]=]$(NEWLINE)" ;
	Contents += "$(project).RelativePath = [=[$(PROJECT_PATH)]=]$(NEWLINE)" ;
	Contents += "$(project).ExternalProject = true$(NEWLINE)" ;
	Contents += "$(project).Options['$(OPTIONS)'] = true$(NEWLINE)" ;

	Depends all : $(TARGET) ;
	Depends $(TARGET) : $(TargetInfoFile) ;
}


rule DumpProjectInfo TARGET : SOURCES : OPTIONS {
	SOURCES = [ ExpandFileList $(SOURCES:T) ] ;

	if $(__AutoSourceGroup_Automatic) {
		AutoSourceGroup $(TARGET) : $(SOURCES) ;
	}

	# Write initial Project information.
	local subdir = $(SUBDIR[1]:R=$(CWD)) ;
	local project = "Projects[ [[$(TARGET)]] ]" ;
	Contents += "$(NEWLINE)$(NEWLINE)--------------------------------------------------------------------$(NEWLINE)" ;

	Contents += "$(project).Name = '$(TARGET)'$(NEWLINE)" ;
	Contents += "$(project).Path = '$(subdir)'$(NEWLINE)" ;
	Contents += "$(project).RelativePath = '$(SUBDIR_DOWN:E=.:J=/)'$(NEWLINE)" ;
	Contents += "$(project).Jamfile = [[$(CURRENT_JAMFILE)]]$(NEWLINE)" ;
	Contents += "if not $(project).Options then $(project).Options = {} end$(NEWLINE)" ;
	Contents += "$(project).Options['$(OPTIONS)'] = true$(NEWLINE)" ;

	if ! ( lib in $(OPTIONS) )
	{
		local ext = SUFEXE ;
		if shared in $(OPTIONS)
		{
			ext = SUFSHAREDLIB ;
		}

		local suffix = $($(ext):Z=$(C.COMPILER_SUITE_SYMBOL)) ;
		local outputName = [ C._retrieveOutputName : $(suffix) ] ;
		Contents += "$(project).OutputNames['$(PLATFORM)']['$(CONFIG)'] = [[$(outputName)]]$(NEWLINE)" ;

		local outputPath = [ C._retrieveOutputPath ] ;
		Contents += "$(project).OutputPaths['$(PLATFORM)']['$(CONFIG)'] = [[$(outputPath[1])/]]$(NEWLINE)" ;

		local debuggerOutputName = $(DEBUGGEROUTPUTNAME:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
		if $(debuggerOutputName) {
			Contents += "$(project).DebuggerOutputNames['$(PLATFORM)']['$(CONFIG)'] = [[$(debuggerOutputName)]]$(NEWLINE)" ;
		}
	}

	local defines ;
	local hdrs = $(SEARCH_SOURCE) ;

	on $(C.ACTIVE_TOOLCHAIN_*) {
		defines += $(DEFINES) ;
		hdrs += $(HDRS) ;
	}

	local forceIncludes ;
	on $(C.ACTIVE_TOOLCHAIN_TARGET) {
		defines += $(DEFINES) ;
		hdrs = $(HDRS) $(hdrs) ;
		forceIncludes = $(FORCE_INCLUDES:T) ;
	}

	local definesString = "[[$(defines)]]," ;
	definesString ?= "" ;
	Contents += "$(project).Defines['$(PLATFORM)']['$(CONFIG)'] = { $(definesString:J= ) }$(NEWLINE)" ;

	hdrs += $(STDHDRS) ;
	hdrs += $(C.STDHDRS:Z=$(C.COMPILER_SUITE_SYMBOL)) ;

	local hdrsString = "[[$(hdrs)]]," ;
	hdrsString ?= "" ;
	Contents += "$(project).IncludePaths['$(PLATFORM)']['$(CONFIG)'] = { $(hdrsString:J= ) }$(NEWLINE)" ;

	local forceIncludesString = "[[$(forceIncludes)]]," ;
	Contents += "$(project).ForceIncludes['$(PLATFORM)']['$(CONFIG)'] = { $(forceIncludesString:J= ) }$(NEWLINE)" ;

	DumpSources $(project) : $(SOURCES) ;

	Depends $(TARGET) : $(TargetInfoFile) ;
}


rule Project PROJECT_NAME : SOURCES
{
	PROJECT_NAME = [ C.ActiveTarget $(PROJECT_NAME) ] ;
	DumpProjectInfo $(PROJECT_NAME) : $(SOURCES) : project ;
}


rule NoWorkspace WORKSPACE_NAME
{
	NO_EXPORT_WORKSPACES.$(WORKSPACE_NAME) = true ;
	Contents += "Workspaces['$(WORKSPACE_NAME)'].Export = false$(NEWLINE)" ;
}


rule Workspace WORKSPACE_NAME : TARGETS : OPTIONS
{
	if $(NO_EXPORT_WORKSPACES.$(WORKSPACE_NAME)) {
		return ;
	}
	if $(EXPORTED_WORKSPACES.$(WORKSPACE_NAME:L):E=$(WORKSPACE_NAME)) != $(WORKSPACE_NAME) {
		Exit "** Already exported '$(WORKSPACE_NAME)' as '$(EXPORTED_WORKSPACES.$(WORKSPACE_NAME:L))'.
Assign NoWorkspace to one of the two to prevent the conflict." ;
	}
	EXPORTED_WORKSPACES.$(WORKSPACE_NAME:L) = $(WORKSPACE_NAME) ;

	Depends all : $(TARGETS) ;
	Depends $(TARGETS) : $(TargetInfoFile) ;

	Contents += "VALID_PLATFORMS = {$(NEWLINE)" ;
	Contents += "$(TAB)$(TAB)[[$(VALID_PLATFORMS)]],$(NEWLINE)" ;
	Contents += "}$(NEWLINE)$(NEWLINE)" ;

	Contents += "VALID_CONFIGS = {$(NEWLINE)" ;
	Contents += "$(TAB)$(TAB)[[$(VALID_CONFIGS)]],$(NEWLINE)" ;
	Contents += "}$(NEWLINE)$(NEWLINE)" ;

	#if $(CONFIG) != * {
		Contents += [ CompilerPlatformInfo ] ;
		Contents += [ CompilerConfigInfo ] ;
	#}

	#if $(PLATFORM) != *
	#{
		#return ;
	#}

	local subdir = $(SUBDIR[1]:R=$(CWD)) ;
	local solutionInfo = "Workspaces['$(WORKSPACE_NAME)']" ;

	if ! [ on $(WORKSPACE_NAME) Var first ]  ||  ( all in $(OPTIONS) )
	{
		Contents += "$(solutionInfo).Name = '$(WORKSPACE_NAME)'
$(solutionInfo).Path = '$(subdir)'
$(solutionInfo).RelativePath = '$(SUBDIR_DOWN:E=.:J=/)'
" ;
		first on $(WORKSPACE_NAME) = false ;
	}

	local projectLines = "$(TAB)'$(TARGETS)',$(NEWLINE)" ;
	Contents += "$(solutionInfo).Projects = concat($(solutionInfo).Projects, $(NEWLINE){$(NEWLINE)$(projectLines)})$(NEWLINE)" ;
}


rule WorkspaceConfig WORKSPACE_NAME : CONFIG_NAME : ACTUAL_CONFIG_NAME : COMMAND_LINE_OPTIONS {
    if $(NO_EXPORT_WORKSPACES.$(WORKSPACE_NAME)) {
        return ;
    }
    if $(PLATFORM) = *  &&  $(CONFIG) = * {
        local solutionInfo = "Workspaces['$(WORKSPACE_NAME)']" ;
        local configText = "$(solutionInfo).Configs[ [[$(CONFIG_NAME)]] ]" ;
        local optionLines = "$(TAB)[[$(COMMAND_LINE_OPTIONS)]],$(NEWLINE)" ;
        Contents += "$(configText).CommandLineOptions = concat($(configText).CommandLineOptions, $(NEWLINE){$(NEWLINE)$(optionLines)})$(NEWLINE)" ;
        Contents += "$(configText).ActualConfigName = [[$(ACTUAL_CONFIG_NAME)]]$(NEWLINE)" ;
    }
}


rule WriteTargetInfoFile FILENAME
{
	Always $(FILENAME) ;
	WriteTargetInfoFileHelper $(FILENAME) ;
}


actions WriteTargetInfoFileHelper
{
	^^($(1)|$(Contents:J=))
}


Contents += "-- This file is generated.  Do not modify.$(NEWLINE)$(NEWLINE)" ;

#if $(PLATFORM) = *  &&  $(CONFIG) = * {
	Contents += "if not concat then
	function concat(l, r)
		local out = {}
		if l then
			for index = 1, #l do
				out[#out + 1] = l[index]
			end
		end
		for index = 1, #r do
			out[#out + 1] = r[index]
		end
		return out
	end
end

if not AutoWriteMetaTable then
	local autoWriteMetaTable = { active = true }
	AutoWriteMetaTable = autoWriteMetaTable

	function autoWriteMetaTable.__index(table, key)
		local t = rawget(table, key)
		if autoWriteMetaTable.active and not t then
			t = {}
			setmetatable(t, autoWriteMetaTable)
			rawset(table, key, t)
		end
		return t
	end

	function autoWriteMetaTable.__newindex(table, key, value)
		local t = rawget(table, key)
		if not t then
			rawset(table, key, value)
			t = rawget(table, key)
		end
		return t
	end
end

if not Projects then
	Projects = setmetatable({}, AutoWriteMetaTable)
end
if not Workspaces then
	Workspaces = setmetatable({}, AutoWriteMetaTable)
end

" ;
#}

JAMFILE = Jamfile.jam ;
include $(JAMFILE) ;

WriteTargetInfoFile $(TargetInfoFile) ;
