rule C.Toolchain.clang.macosx-shared {
}


rule C.macosx.FrameworkDirectories TARGET : FRAMEWORKDIRS {
	TARGET = [ ActiveTarget $(TARGET) ] ;
	FRAMEWORKDIRS = $(FRAMEWORKDIRS:R=$(SUBDIR:E="")) ;
	C.Flags $(TARGET) : CC C++ M MM : -F\"$(FRAMEWORKDIRS)\" ;
	C.LinkFlags $(TARGET) : -F\"$(FRAMEWORKDIRS)\" ;
}


rule C.macosx.LinkFrameworks TARGET : FRAMEWORKS : OPTIONS {
	C.ActiveTarget $(TARGET) ;
	FRAMEWORKS on $(C.ACTIVE_TOOLCHAIN_TARGET) += $(FRAMEWORKS) ;
	if public in $(OPTIONS) {
		__PUBLIC on $(C.ACTIVE_TOOLCHAIN_TARGET) = true ;
		PUBLIC_FRAMEWORKS on $(C.ACTIVE_TOOLCHAIN_TARGET) += $(FRAMEWORKS) ;
	}
}


rule C.macosx.WeakLinkFrameworks TARGET : FRAMEWORKS {
	TARGET = [ ActiveTarget $(TARGET) ] ;
	C.LinkFlags $(TARGET) : "-weak_framework $(FRAMEWORKS)" ;
}


actions C.macosx.clang.Archive {
	$(C.AR:C) -static $(LIBFLAGS) -o $(<:C) -filelist ^^^($(>:J=$(NEWLINE)))
}


actions C.macosx.clang.Link {
	$(C.LINK:C) $(LINKFLAGS) -o $(<[1]:C) -filelist ^^^($(>:J=$(NEWLINE))) $(NEEDLIBS:TC) $(LINKLIBS:TC)
}


rule macosx.SDK SDK_VERSION {
	local SDK_PLATFORM ;
	SDK_PLATFORM ?= $(C.PLATFORM) ;

	local COMPILER_BIN_PATH = $(COMPILER_BIN_PATH:Z=$(C.COMPILER_SUITE_SYMBOL)) ;
	local developerRoot ;
	local isysroot ;
	local flags ;
	local sdkroot ;
	local architecture ;

	developerRoot = /Developer/SDKs ;
	#SDK_VERSION ?= ;
	switch $(SDK_VERSION) {
		case 10.4 :
			isysroot = $(developerRoot)/MacOSX10.4u.sdk ;
			sdkroot = macosx10.4 ;

		case 10.4u :
			isysroot = $(developerRoot)/MacOSX10.4u.sdk ;
			sdkroot = macosx10.4 ;

		case 10.5 :
			isysroot = $(developerRoot)/MacOSX10.5.sdk ;
			sdkroot = macosx10.5 ;

		case 10.6 :
			isysroot = $(developerRoot)/MacOSX10.6.sdk ;
			sdkroot = macosx10.6 ;
		
		case 10.7 :
			isysroot = $(developerRoot)/MacOSX10.7.sdk ;
			sdkroot = macosx10.7 ;
		
		case 10.8 :
			developerRoot = [ Match ([^$(NEWLINE)]*) : [ Shell "xcode-select --print-path" ] ] ;
			isysroot = $(developerRoot)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk ;
			sdkroot = macosx10.8 ;

		case 10.9 :
			developerRoot = [ Match ([^$(NEWLINE)]*) : [ Shell "xcode-select --print-path" ] ] ;
			isysroot = $(developerRoot)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk ;
			sdkroot = macosx10.9 ;

		case 10.11 :
			developerRoot = [ Match ([^$(NEWLINE)]*) : [ Shell "xcode-select --print-path" ] ] ;
			isysroot = $(developerRoot)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk ;
			sdkroot = macosx ;

		case 10.12 :
			developerRoot = [ Match ([^$(NEWLINE)]*) : [ Shell "xcode-select --print-path" ] ] ;
			isysroot = $(developerRoot)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk ;
			sdkroot = macosx ;

		case 10.13 :
			developerRoot = [ Match ([^$(NEWLINE)]*) : [ Shell "xcode-select --print-path" ] ] ;
			isysroot = $(developerRoot)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk ;
			sdkroot = macosx ;

		case 10.14 :
			developerRoot = [ Match ([^$(NEWLINE)]*) : [ Shell "xcode-select --print-path" ] ] ;
			isysroot = $(developerRoot)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk ;
			sdkroot = macosx ;

		case 10.15 :
			developerRoot = [ Match ([^$(NEWLINE)]*) : [ Shell "xcode-select --print-path" ] ] ;
			isysroot = $(developerRoot)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk ;
			sdkroot = macosx ;

		case * :
			developerRoot = [ Match ([^$(NEWLINE)]*) : [ Shell "xcode-select --print-path" ] ] ;
			isysroot = $(developerRoot)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk ;
			sdkroot = macosx ;
			#Exit "* macosx.SDK: Unsupported version $(SDK_VERSION) for SDK platform $(SDK_PLATFORM)." ;
	}
	developerRoot = $(isysroot) ;

	C.AR on $(C.COMPILER_SUITE_SYMBOL) = $(COMPILER_BIN_PATH)/$(C.AR:BSZ=$(C.COMPILER_SUITE_SYMBOL)) ;
	C.CC on $(C.COMPILER_SUITE_SYMBOL) = $(COMPILER_BIN_PATH)/$(C.CC:BSZ=$(C.COMPILER_SUITE_SYMBOL)) ;
	C.C++ on $(C.COMPILER_SUITE_SYMBOL) = $(COMPILER_BIN_PATH)/$(C.C++:BSZ=$(C.COMPILER_SUITE_SYMBOL)) ;
	C.LINK on $(C.COMPILER_SUITE_SYMBOL) = $(COMPILER_BIN_PATH)/$(C.LINK:BSZ=$(C.COMPILER_SUITE_SYMBOL)) ;
	C.RANLIB on $(C.COMPILER_SUITE_SYMBOL) = ;

	if ! $(architecture) {
		switch $(C.PLATFORM) {
			case macosx32 : architecture = i386 ;
			case macosx64 : architecture = x86_64 ;
		}
	}
	C.ARCHITECTURE on $(C.ACTIVE_TOOLCHAIN_*) = $(architecture) ;
	ISYSROOT on $(C.ACTIVE_TOOLCHAIN_*) = $(isysroot) ;
	SDK_VERSION on $(C.ACTIVE_TOOLCHAIN_*) ?= $(SDK_VERSION) ;
	SDK_VERSION_MIN on $(C.ACTIVE_TOOLCHAIN_*) ?= $(SDK_VERSION) ;
	XCODE_SDKROOT on $(C.ACTIVE_TOOLCHAIN_*) = $(sdkroot) ;

	if $(TARGETINFO_LOCATE) {
		Contents += "Projects[ [[C.*]] ].XCODE_SDKROOT[ [[$(C.PLATFORM)]] ][ [[$(C.CONFIG)]] ] = [[$(sdkroot)]]
Projects[ [[C.*]] ].XCODE_ARCHITECTURE[ [[$(C.PLATFORM)]] ][ [[$(C.CONFIG)]] ] = { [[$(architecture)]] }

" ;
	}
}

rule macosx.MinimumOSVersion TARGET : SDK_VERSION_MIN {
	TARGET = [ ActiveTarget $(TARGET) ] ;

	local SDK_PLATFORM ;
	SDK_PLATFORM ?= $(C.PLATFORM) ;

	SDK_VERSION_MIN on $(C.ACTIVE_TOOLCHAIN_TARGET) = $(SDK_VERSION_MIN) ;

	if $(TARGETINFO_LOCATE) {
		Contents += "Projects[ [[C.*]] ].OSX_SDK_VERSION_MIN[ [[$(C.PLATFORM)]] ][ [[$(C.CONFIG)]] ] = [[$(SDK_VERSION_MIN)]]

" ;
	}
}


InfoPlistHelper = "
function GetInfoPlistCurrentLevelNoCreate()
	if not plist then
		plist = require 'plist'
	end
	local plistName = jam_getvar('C.ACTIVE_TOOLCHAIN_TARGET_GRIST')[1] .. ':Info.plist'
	return _G[plistName]
end


function GetInfoPlistCurrentLevel()
	if not plist then
		plist = require 'plist'
	end
	local plistName = jam_getvar('C.ACTIVE_TOOLCHAIN_TARGET_GRIST')[1] .. ':Info.plist'
	if not _G[plistName] then
		_G[plistName] = plist.newdict()
	end
	return _G[plistName]
end


function PushInfoPlistLevel(key, value)
	local currentLevel = GetInfoPlistCurrentLevel()
	local newLevel = value
	rawset(newLevel, '__previous', currentLevel)
	local plistName = jam_getvar('C.ACTIVE_TOOLCHAIN_TARGET_GRIST')[1] .. ':Info.plist'
	_G[plistName] = newLevel
	return newLevel
end


function PopInfoPlistLevel()
	local currentLevel = GetInfoPlistCurrentLevel()
	local previousLevel = rawget(currentLevel, '__previous')
	if previousLevel then
		rawset(currentLevel, '__previous', nil)
		local plistName = jam_getvar('C.ACTIVE_TOOLCHAIN_TARGET_GRIST')[1] .. ':Info.plist'
		_G[plistName] = previousLevel
		return previousLevel
	end
	return currentLevel
end
" ;


rule macosx.BundleInfoBoolean TARGET : KEY : VALUE {
	if $(InfoPlistHelper) {  LuaString $(InfoPlistHelper) ;  InfoPlistHelper = ;  }

	TARGET = [ ActiveTarget $(TARGET) ] ;
	LuaString "GetInfoPlistCurrentLevel()[jam_getvar('KEY')[1]] = jam_getvar('VALUE')[1] == 'true'" ;
}


rule macosx.BundleInfoInteger TARGET : KEY : VALUE {
	if $(InfoPlistHelper) {  LuaString $(InfoPlistHelper) ;  InfoPlistHelper = ;  }

	TARGET = [ ActiveTarget $(TARGET) ] ;
	LuaString "GetInfoPlistCurrentLevel()[jam_getvar('KEY')[1]] = tonumber(jam_getvar('VALUE')[1])" ;
}


rule macosx.BundleInfoString TARGET : KEY : VALUE {
	if $(InfoPlistHelper) {  LuaString $(InfoPlistHelper) ;  InfoPlistHelper = ;  }

	TARGET = [ ActiveTarget $(TARGET) ] ;
	LuaString "GetInfoPlistCurrentLevel()[jam_getvar('KEY')[1]] = jam_getvar('VALUE')[1]" ;
}


rule macosx.BundleInfoDictBegin TARGET : KEY {
	if $(InfoPlistHelper) {  LuaString $(InfoPlistHelper) ;  InfoPlistHelper = ;  }

	TARGET = [ ActiveTarget $(TARGET) ] ;
	LuaString "
		local currentLevel = GetInfoPlistCurrentLevel()
		local newLevel = plist.newdict()
		currentLevel[jam_getvar('KEY')[1]] = newLevel
		rawset(newLevel, '__previous', currentLevel)
		local plistName = jam_getvar('C.ACTIVE_TOOLCHAIN_TARGET_GRIST')[1] .. ':Info.plist'
		_G[plistName] = newLevel
" ;
}


rule macosx.BundleInfoDictEnd TARGET {
	if $(InfoPlistHelper) {  LuaString $(InfoPlistHelper) ;  InfoPlistHelper = ;  }

	TARGET = [ ActiveTarget $(TARGET) ] ;
	LuaString "PopInfoPlistLevel()" ;
}


rule macosx.BundleInfoArrayBegin TARGET : KEY {
	if $(InfoPlistHelper) {  LuaString $(InfoPlistHelper) ;  InfoPlistHelper = ;  }

	TARGET = [ ActiveTarget $(TARGET) ] ;
	LuaString "
		local currentLevel = GetInfoPlistCurrentLevel()
		local newLevel = plist.newarray()
		currentLevel[jam_getvar('KEY')[1]] = newLevel
		rawset(newLevel, '__previous', currentLevel)
		local plistName = jam_getvar('C.ACTIVE_TOOLCHAIN_TARGET_GRIST')[1] .. ':Info.plist'
		_G[plistName] = newLevel
" ;
}


rule macosx.BundleInfoArrayEnd TARGET {
	if $(InfoPlistHelper) {  LuaString $(InfoPlistHelper) ;  InfoPlistHelper = ;  }

	TARGET = [ ActiveTarget $(TARGET) ] ;
	LuaString "PopInfoPlistLevel()" ;
}


rule macosx.BundleInfoArrayDictBegin TARGET {
	if $(InfoPlistHelper) {  LuaString $(InfoPlistHelper) ;  InfoPlistHelper = ;  }

	TARGET = [ ActiveTarget $(TARGET) ] ;
	LuaString "
		local currentLevel = GetInfoPlistCurrentLevel()
		local newLevel = plist.newdict()
		currentLevel[#currentLevel + 1] = newLevel
		rawset(newLevel, '__previous', currentLevel)
		local plistName = jam_getvar('C.ACTIVE_TOOLCHAIN_TARGET_GRIST')[1] .. ':Info.plist'
		_G[plistName] = newLevel
" ;
}


rule macosx.BundleInfoArrayDictEnd TARGET {
	if $(InfoPlistHelper) {  LuaString $(InfoPlistHelper) ;  InfoPlistHelper = ;  }

	TARGET = [ ActiveTarget $(TARGET) ] ;
	LuaString "PopInfoPlistLevel()" ;
}


rule macosx.BundleInfoArrayBoolean TARGET : KEY : VALUE {
	if $(InfoPlistHelper) {  LuaString $(InfoPlistHelper) ;  InfoPlistHelper = ;  }

	TARGET = [ ActiveTarget $(TARGET) ] ;
	if $(VALUE) {
		LuaString "GetInfoPlistCurrentLevel()[jam_getvar('KEY')[1]] = jam_getvar('VALUE')" ;
	} else {
		LuaString "
			local currentLevel = GetInfoPlistCurrentLevel()
			local key = jam_getvar('KEY')
			local values = jam_getvar('VALUE')
			for index, value in ipairs(values) do
				currentLevel[#currentLevel + 1] = value
			end
" ;
	}
}


rule macosx.BundleInfoArrayInteger TARGET : KEY : VALUE {
	if $(InfoPlistHelper) {  LuaString $(InfoPlistHelper) ;  InfoPlistHelper = ;  }

	TARGET = [ ActiveTarget $(TARGET) ] ;
	if $(VALUE) {
		LuaString "
			local values = jam_getvar('VALUE')
			for index, value in ipairs(values) do
				values[index] = tonumber(value)
			end
			GetInfoPlistCurrentLevel()[jam_getvar('KEY')[1]] = values
" ;
	} else {
		LuaString "
			local currentLevel = GetInfoPlistCurrentLevel()
			local values = jam_getvar('KEY')
			for index, value in ipairs(values) do
				currentLevel[#currentLevel + 1] = tonumber(value)
			end
" ;
	}
}


rule macosx.BundleInfoArrayString TARGET : KEY : VALUE {
	if $(InfoPlistHelper) {  LuaString $(InfoPlistHelper) ;  InfoPlistHelper = ;  }

	TARGET = [ ActiveTarget $(TARGET) ] ;
	if $(VALUE) {
		LuaString "GetInfoPlistCurrentLevel()[jam_getvar('KEY')[1]] = jam_getvar('VALUE')" ;
	} else {
		LuaString "
			local currentLevel = GetInfoPlistCurrentLevel()
			local values = jam_getvar('KEY')
			for index, value in ipairs(values) do
				currentLevel[#currentLevel + 1] = value
			end
" ;
	}
}


rule macosx.BundleInfo TARGET : TYPE : VALUE {
	TARGET = [ ActiveTarget $(TARGET) ] ;
	on $(C.ACTIVE_TOOLCHAIN_TARGET) if ! $(INFO_PLIST_KEYS) {
		INFO_PLIST_KEYS on $(C.ACTIVE_TOOLCHAIN_TARGET) = true ;

		SDK_VERSION_MIN ?= $(SDK_VERSION_MIN:Z=$(C.ACTIVE_TOOLCHAIN_*)) ;
		macosx.BundleInfoString : CFBundleDevelopmentRegion : en ;
		macosx.BundleInfoString : CFBundleExecutable : [ C._retrieveOutputName $(TARGET) ] ;
		macosx.BundleInfoString : CFBundleInfoDictionaryVersion : 6.0 ;
		macosx.BundleInfoString : CFBundlePackageType : APPL ;
		macosx.BundleInfoString : CFBundleSignature : ???? ;
		macosx.BundleInfoString : MinimumOSVersion : $(SDK_VERSION_MIN) ;
		#macosx.BundleInfoString : CFBundleResourceSpecification : ResourceRules.plist ;

		local sdkversion = $(SDK_VERSION:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
		sdkversion ?= $(SDK_VERSION:Z=$(C.ACTIVE_TOOLCHAIN_*)) ;

		local minimumsdkversion = $(SDK_VERSION_MIN:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
		minimumsdkversion ?= $(SDK_VERSION_MIN:Z=$(C.ACTIVE_TOOLCHAIN_*)) ;

		macosx.BundleInfoString : DTPlatformName : macos ;
		macosx.BundleInfoString : DTPlatformVersion : $(sdkversion) ;
		macosx.BundleInfoString : DTSDKName : iphoneos$(sdkversion) ;

		local xcodeVersions = [ Match "Xcode ([^$(NEWLINE)]*).*Build version ([^$(NEWLINE)]*)" : [ Shell "xcodebuild -version" ] ] ;
		xcodeVersions = [ Subst $(xcodeVersions[1]) : "%." : "" ] $(xcodeVersions[2]) ;
		xcodeVersions = 0$(xcodeVersions[1]) $(xcodeVersions[2]) ;
		macosx.BundleInfoString : DTXcode : $(xcodeVersions[1]) ;
		macosx.BundleInfoString : DTXcodeBuild : $(xcodeVersions[2]) ;

		#local sdkVersion = [ Match "([^$(NEWLINE)]*)" : [ Shell "xcrun --sdk iphoneos$(sdkversion) --show-sdk-build-version" ] ] ;
		#macosx.BundleInfoString : DTSDKBuild : $(sdkVersion) ;
		#macosx.BundleInfoString : DTPlatformBuild : $(sdkVersion) ;

		local osVersion = [ Match "([^$(NEWLINE)]*)" : [ Shell "sw_vers -buildVersion" ] ] ;
		macosx.BundleInfoString : BuildMachineOSBuild : $(osVersion) ;

		#macosx.BundleInfoArrayString : CFBundleSupportedPlatforms : iPhoneOS ;
		macosx.BundleInfoString : MinimumOSVersion : $(minimumsdkversion) ;
	}

	switch $(TYPE:L) {
		case info :					macosx.BundleInfoString : CFBundleGetInfoString : $(VALUE) ;
		case iconfile :				macosx.BundleInfoString : CFBundleIconFile : $(VALUE) ;
		case iconfiles :			macosx.BundleInfoArrayString : CFBundleIconFiles : $(VALUE) ;
		case longversion :			macosx.BundleInfoString : CFBundleLongVersionString : $(VALUE) ;
		case bundlename :
			macosx.BundleInfoString : CFBundleName : $(VALUE) ;
			CFBundleName on $(C.ACTIVE_TOOLCHAIN_TARGET) = $(VALUE) ;
		case displayname :
			macosx.BundleInfoString : CFBundleDisplayName : $(VALUE) ;
			CFBundleDisplayName on $(C.ACTIVE_TOOLCHAIN_TARGET) = $(VALUE) ;
		case executable :			macosx.BundleInfoString : CFBundleExecutable : $(VALUE) ;
		case identifier :
			macosx.BundleInfoString : CFBundleIdentifier : $(VALUE) ;
			CFBundleIdentifier on $(C.ACTIVE_TOOLCHAIN_TARGET) = $(VALUE) ;
		case shortversion :			macosx.BundleInfoString : CFBundleShortVersionString : $(VALUE) ;
		case bundleversion :
			macosx.BundleInfoString : CFBundleVersion : $(VALUE) ;
			CFBundleVersion on $(C.ACTIVE_TOOLCHAIN_TARGET) = $(VALUE) ;
		case copyright :			macosx.BundleInfoString : NSHumanReadableCopyright : $(VALUE) ;
		case mainnibfile :			macosx.BundleInfoString : NSMainNibFile : $(VALUE) ;
		case nsprincipalclass :		macosx.BundleInfoString : NSPrincipalClass : $(VALUE) ;
		case resourcespec :			macosx.BundleInfoString : CFBundleResourceSpecification : $(VALUE) ;
		case supportedplatforms :   macosx.BundleInfoArray : CFBundleSupportedPlatforms : $(VALUE) ;
		case minimumosversion :		macosx.BundleInfoString : MinimumOSVersion : $(VALUE) ;
		case uidevicefamily :		macosx.BundleInfoIntegerArray : UIDeviceFamily : $(VALUE) ;
		case uiprerenderedicon :	macosx.BundleInfoBoolean : UIPrerenderedIcon : $(VALUE) ;
		case uistatusbarhidden :	macosx.BundleInfoBoolean : UIStatusBarHidden : $(VALUE) ;
		case uiviewcontrollerbasedstatusbarappearance : macosx.BundleInfoBoolean : UIViewControllerBasedStatusBarAppearance : $(VALUE) ;
	}
}


rule macosx.MergeInfoPList TARGET : SOURCE {
	if $(InfoPlistHelper) {  LuaString $(InfoPlistHelper) ;  InfoPlistHelper = ;  }

	TARGET = [ ActiveTarget $(TARGET) ] ;

	local grist = $(C.ACTIVE_TOOLCHAIN_TARGET_GRIST):source ;
	local source = $(SOURCE:BSG=$(grist)) ;
	if $(SOURCE:D) != "" {
		SEARCH on $(source) ?= $(SOURCE:D) ;
	}
	SEARCH on $(source) ?= $(SEARCH_SOURCE) ;

	local sourcePath = $(source:T) ;
	LuaString "
		if not plist then
			plist = require 'plist'
		end
		local left = plist.read(jam_getvar('sourcePath')[1])
		plist.merge(left, GetInfoPlistCurrentLevel())
" ;
}


rule macosx.InfoPListFile TARGET : SOURCE {
	if $(InfoPlistHelper) {  LuaString $(InfoPlistHelper) ;  InfoPlistHelper = ;  }

	#TARGET = [ ActiveTarget $(TARGET) ] ;

	local grist = $(C.ACTIVE_TOOLCHAIN_TARGET_GRIST):intermediate ;
	local destination = @(Info.plist:G=$(grist)) ;
	MakeLocate $(destination) : $(LOCATE_SOURCE) ;

	grist = $(C.ACTIVE_TOOLCHAIN_TARGET_GRIST):source ;
	local source = $(SOURCE:G=$(grist)) ;
	BINDING on $(source) = $(SOURCE:BS) ;
	SEARCH on $(source) ?= $(SOURCE:D:R=$(SEARCH_SOURCE)) ;

	local EXECUTABLE_NAME = [ C._retrieveOutputName $(TARGET) ] ;
	C.ConfigureFile $(TARGET) : $(destination) : $(source) : parens ;
	INFO_PLIST_FILE on $(C.ACTIVE_TOOLCHAIN_TARGET) = $(destination) ;

	local sourcePath = $(destination:T) ;
	LuaString "
		if not plist then
			plist = require 'plist'
		end
		local left = plist.read(jam_getvar('sourcePath')[1])
		plist.merge(left, GetInfoPlistCurrentLevel())
" ;

	if $(TARGETINFO_LOCATE) {
		Contents += "Projects[ [[$(C.ACTIVE_TARGET)]] ].INFOPLIST_FILE[ [[$(C.PLATFORM)]] ][ [[$(C.CONFIG)]] ] = [[$(source:T)]]$(NEWLINE)" ;
		Contents += "Projects[ [[$(C.ACTIVE_TARGET)]] ].Sources = concat(Projects[ [[$(C.ACTIVE_TARGET)]] ].Sources, { [[$(source:T)]] })$(NEWLINE)" ;
	}
}


actions C.macosx._GenerateDSYMFile {
	$(C.DSYMUTIL:C) $(2:C) -o $(OUTPUT_PATH:C)
}


rule macosx.BundlePath TARGET : BUNDLE_PATH {
	TARGET = [ ActiveTarget $(TARGET) ] ;
	macosx._SetDefaultBundlePath ;
	BUNDLE_PATH on $(C.ACTIVE_TOOLCHAIN_TARGET) = $(BUNDLE_PATH:R=$(SUBDIR)) ;
}


rule macosx.GetBundlePath TARGET {
	TARGET = [ ActiveTarget $(TARGET) ] ;
	local bundlePath = $(BUNDLE_PATH:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
	if ! $(bundlePath) {
		macosx._SetDefaultBundlePath ;
		return $(BUNDLE_PATH:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
	} else {
		return $(bundlePath) ;
	}
}


rule macosx.GetBundleTarget TARGET {
	TARGET = [ ActiveTarget $(TARGET) ] ;
	local bundleTarget = $(BUNDLE_TARGET:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
	if ! $(bundleTarget) {
		macosx._SetDefaultBundlePath ;
		return $(BUNDLE_TARGET:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
	} else {
		return $(bundleTarget) ;
	}
}


rule C.macosx.GenerateDSYMFile TARGET {
	TARGET = [ ActiveTarget $(TARGET) ] ;
	local bundlePath = [ macosx.GetBundlePath $(TARGET) ] ;
	local dsymBundlePath = $(bundlePath).dSYM ;
	local _t = $(LIPO_TARGET:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
	local _t.dsym = $(_t).DSYM ;
	DSYM_NAME on $(C.ACTIVE_TOOLCHAIN_TARGET) = $(_t.dsym) ;
	BINDING on $(_t.dsym) = $(BINDING:Z=$(_t)) ;
	OUTPUT_PATH on $(_t.dsym) = $(dsymBundlePath) ;
	MakeLocate $(_t.dsym) : $(dsymBundlePath)/Contents/Resources/DWARF ;
	Depends $(C.ACTIVE_TOOLCHAIN_TARGET) : $(_t.dsym) : $(_t) ;
	CleanTree $(CLEAN_BUNDLE_TARGET:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) : $(dsymBundlePath) ;
	C.macosx._GenerateDSYMFile $(_t.dsym) : $(_t) : $(C.COMPILER_SUITE_SYMBOL) ;
}


C.__DOLLAR = \\$ ;
C.__JUST_DOLLAR = $ ;
C.__COLON = ":" ;

# 1. Make copy of incoming entitlements file to destination file.
# 2. If "<key>aps-environment</key>" and "<string>development</string>" is in file, then set "aps-environment" to "development" in destination file (required for push notifications).
# 3. If "<key>aps-environment</key>" and "<string>production</string>" is in file, then set "aps-environment" to "production" in destination file (required for push notifications).
# 4. If "<key>beta-reports-active</key>" exists, and next line is "<true/>", then set "beta-reports-active" to "true" in destination file (required for push notifications).
# 5. Set "get-task-allow" as per get-task-allow settings in provisioning profile (these must match).
# 6. Set 'keychain-access-groups:" as per keychain-access-groups settings in provisioning profile (these must match).
# 7. Set 'application-identifier' as per application-identifier setting in provisioning profile (these must match).
actions macosx.ProcessEntitlements
{
	cp $(2[1]) $(1)
	cat "$(PROVISION)" | grep "<key>aps-environment</key>" > /dev/null && cat "$(PROVISION)" | grep "<string>development</string>" > /dev/null && /usr/libexec/PlistBuddy -c "Add :aps-environment string development" $(1)
	cat "$(PROVISION)" | grep "<key>aps-environment</key>" > /dev/null && cat "$(PROVISION)" | grep "<string>production</string>" > /dev/null && /usr/libexec/PlistBuddy -c "Add :aps-environment string production" $(1)
	cat "$(PROVISION)" | awk '/<key>beta-reports-active<\/key>/,/\/>/' | grep '<key>beta-reports-active</key>' -A1 | grep '<true/>' > /dev/null && /usr/libexec/PlistBuddy -c "Add :beta-reports-active bool true" $(1)
	security cms -D -i "$(PROVISION)" > $(1:D)/tmp.plist
	/usr/libexec/PlistBuddy -c "Add :get-task-allow bool" $(1)
	/usr/libexec/PlistBuddy -c "Set :get-task-allow `/usr/libexec/PlistBuddy -c "Print :Entitlements:get-task-allow" $(1:D)/tmp.plist`" $(1)
	/usr/libexec/PlistBuddy -c "Set :keychain-access-groups:0 `/usr/libexec/PlistBuddy -c "Print :Entitlements:keychain-access-groups:0" $(1:D)/tmp.plist`" $(1)
	/usr/libexec/PlistBuddy -c "Set :application-identifier `/usr/libexec/PlistBuddy -c "Print :Entitlements:application-identifier" $(1:D)/tmp.plist`" $(1)
	rm $(1:D)/tmp.plist
}


actions C.macosx._Lipo {
	$(C.LIPO:C) $(2:C) -output $(1:C) -create
}


rule C.macosx.Lipo TARGET : LINK_TARGETS : OUTPUT_PATH {
	TARGET = [ ActiveTarget $(TARGET) ] ;
	local _t = $(LINK_TARGETS[0]:G=$(C.ACTIVE_TOOLCHAIN_TARGET_GRIST)$(C.__COLON)lipo) ;
	BINDING on $(_t) = $(BINDING:Z=$(LINK_TARGETS[0])) ;
	Depends $(TARGET) : $(C.ACTIVE_TOOLCHAIN_TARGET) : $(_t) : $(LINK_TARGETS) ;
	MakeLocate $(_t) : $(OUTPUT_PATH) ;
	UseCommandLine $(_t) : $(LINK_TARGETS) ;
	Clean $(C.ACTIVE_TOOLCHAIN_CLEAN_TARGET) : $(_t) ;
	C.macosx._Lipo $(_t) : $(LINK_TARGETS) : $(C.COMPILER_SUITE_SYMBOL) ;
	LIPO_TARGET on $(C.ACTIVE_TOOLCHAIN_TARGET) = $(_t) ;
	return $(linkTargets) ;
}


rule macosx.Bundle TARGET : TOOLCHAINS {
	TARGET = [ ActiveTarget $(TARGET) ] ;

	local bundlePath = [ macosx.GetBundlePath ] ;
	local bundleTarget = [ macosx.GetBundleTarget ] ;
	local cleanBundleTarget = $(CLEAN_BUNDLE_TARGET:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
	Depends $(C.ACTIVE_TOOLCHAIN_TARGET) : $(bundleTarget) ;
	NotFile $(bundleTarget) ;
	Depends clean : clean:$(TARGET) : $(C.ACTIVE_TOOLCHAIN_CLEAN_TARGET) : $(cleanBundleTarget) ;
	NotFile clean:$(TARGET) $(C.ACTIVE_TOOLCHAIN_CLEAN_TARGET) ;
	Always clean:$(TARGET) $(C.ACTIVE_TOOLCHAIN_CLEAN_TARGET) ;
	NotFile $(cleanBundleTarget) ;
	Always $(cleanBundleTarget) ;

	local linkTargets ;
	local toolchain ;
	for toolchain in $(TOOLCHAINS:E=$(C.ACTIVE_TOOLCHAIN)) {
		linkTargets += [ C.GetLinkTargets $(TARGET) : $(toolchain) ] ;
	}
	C.macosx.Lipo $(TARGET) : $(linkTargets) : $(bundlePath)/MacOS ;

	{
		local isysroot = $(ISYSROOT:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
		isysroot ?= $(ISYSROOT:Z=$(C.ACTIVE_TOOLCHAIN_*)) ;

		# Handle the PkgInfo file
		local pkginfo = @(PkgInfo:G=$(C.ACTIVE_TOOLCHAIN_TARGET_GRIST)) ;
		MakeLocate $(pkginfo) : $(bundlePath) ;
		local contents = APPL???? ;
		CONTENTS on $(pkginfo) = $(contents) ;
		WriteFile $(pkginfo) ;
		UseCommandLine $(pkginfo) : $(contents) ;
		Depends $(bundleTarget) : $(pkginfo) ;
		Clean $(cleanBundleTarget) : $(pkginfo) ;

		# Handle the Info.plist file.
		local infoplist = @(Info.plist:G=$(C.ACTIVE_TOOLCHAIN_TARGET_GRIST)) ;
		MakeLocate $(infoplist) : $(bundlePath) ;
		Depends $(bundleTarget) : $(infoplist) ;
		Clean $(cleanBundleTarget) : $(infoplist) ;

		if $(INFO_PLIST_FILE:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) {
			CopyFile $(bundleTarget) : $(infoplist) : $(INFO_PLIST_FILE:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
		} else {
			if $(InfoPlistHelper) {  LuaString $(InfoPlistHelper) ;  InfoPlistHelper = ;  }

			local infoplistcontents = [ LuaString "
				local currentLevel = GetInfoPlistCurrentLevel()
				return plist.dump(currentLevel)
" ] ;
			if $(infoplistcontents) {
				CONTENTS on $(infoplist) = $(infoplistcontents) ;
				WriteFile $(infoplist) ;

				UseCommandLine $(infoplist) : $(infoplistcontents) ;
			}
		}
	}

	if $(C.PLATFORM) in macosx32 macosx64 {
#		C.macosx.GenerateDSYMFile $(TARGET) ;
	}
}


rule macosx._SetDefaultBundlePath {
	if $(BUNDLE_PATH:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) {
		return ;
	}

	local outputName = [ C._retrieveOutputName ] ;
	local outputPath = [ C._retrieveOutputPath ] ;
	local bundlePath = $(outputPath)/$(outputName).app ;
	BUNDLE_PATH on $(C.ACTIVE_TOOLCHAIN_TARGET) = $(bundlePath)/Contents ;

	local bundleTarget = $(C.ACTIVE_TOOLCHAIN_TARGET_GRIST):bundle ;
	local colon = ":" ;
	local cleanBundleTarget = @(clean$(colon)$(TARGET)$(colon)bundle:G=$(C.ACTIVE_TOOLCHAIN_GRIST)) ;
	BUNDLE_TARGET on $(C.ACTIVE_TOOLCHAIN_TARGET) = $(bundleTarget) ;
	CLEAN_BUNDLE_TARGET on $(C.ACTIVE_TOOLCHAIN_TARGET) = $(cleanBundleTarget) ;
}


rule C.macosx._ApplicationFromObjects_PostBuild {
	macosx._SetDefaultBundlePath ;

	if bundle in $(OPTIONS) {
		macosx.Bundle ;
	}
}


rule C.macosx._Inherits {
	local publicFrameworks = $(PUBLIC_FRAMEWORKS:Z=$(inheritsTarget)) ;
	if $(publicFrameworks) {
		FRAMEWORKS on $(C.ACTIVE_TOOLCHAIN_TARGET) += $(publicFrameworks) ;
		if $(public) {
			PUBLIC_FRAMEWORKS on $(C.ACTIVE_TOOLCHAIN_TARGET) += $(publicFrameworks) ;
		}
	}
}


rule C.macosx._MultiCppCompile_SetupFlags {
	local isysroot = $(ISYSROOT:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
	isysroot ?= $(ISYSROOT:Z=$(C.ACTIVE_TOOLCHAIN_*)) ;

	local sdkversion = $(SDK_VERSION:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
	sdkversion ?= $(SDK_VERSION:Z=$(C.ACTIVE_TOOLCHAIN_*)) ;

	local minimumsdkversion = $(SDK_VERSION_MIN:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
	minimumsdkversion ?= $(SDK_VERSION_MIN:Z=$(C.ACTIVE_TOOLCHAIN_*)) ;

	local architecture = $(C.ARCHITECTURE:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
	architecture ?= $(C.ARCHITECTURE:Z=$(C.ACTIVE_TOOLCHAIN_*)) ;

	local extraflags ;
	extraflags += "-isysroot $(isysroot:C)" ;
	extraflags += "-arch $(architecture)" ;
	switch $(C.PLATFORM) {
		case macosx32 :
			# 10.4, 10.5, 10.6, 10.7, 10.8 10.9
			extraflags += -mmacosx-version-min=$(minimumsdkversion) ;

		case macosx64 :
			# 10.4, 10.5, 10.6, 10.7, 10.8 10.9
			extraflags += -mmacosx-version-min=$(minimumsdkversion) ;
	}

	_flags = $(_flags[1-4]) $(extraflags) $(_flags[5-]) ;

	C.clang._MultiCppCompile_SetupFlags ;
	#C.$(C.COMPILER_SUITE)._MultiCppCompile_SetupFlags ;
}


rule C.macosx._ApplicationFromObjects_LinkFlags {
	linkRule = C.macosx.clang.Link ;

	local isysroot = $(ISYSROOT:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
	isysroot ?= $(ISYSROOT:Z=$(C.ACTIVE_TOOLCHAIN_*)) ;

	local architecture = $(C.ARCHITECTURE:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
	architecture ?= $(C.ARCHITECTURE:Z=$(C.ACTIVE_TOOLCHAIN_*)) ;

	local sdkversion = $(SDK_VERSION:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
	sdkversion ?= $(SDK_VERSION:Z=$(C.ACTIVE_TOOLCHAIN_*)) ;

	local minimumsdkversion = $(SDK_VERSION_MIN:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
	minimumsdkversion ?= $(SDK_VERSION_MIN:Z=$(C.ACTIVE_TOOLCHAIN_*)) ;

	linkFlags += "-isysroot $(isysroot:C)" ;
	linkFlags += "-arch $(architecture)" ;
	switch $(C.PLATFORM) {
		case macosx32 :
			# 10.4, 10.5, 10.6, 10.7, 10.8 10.9
			linkFlags += -mmacosx-version-min=$(minimumsdkversion) ;

		case macosx64 :
			# 10.4, 10.5, 10.6, 10.7, 10.8 10.9
			linkFlags += -mmacosx-version-min=$(minimumsdkversion) ;
	}

	linkFlags += "-framework $(FRAMEWORKS:Z=$(C.ACTIVE_TOOLCHAIN_TARGET))" ;
}


rule C.macosx._LibraryFromObjects_LibFlags {
	archiveRule = C.macosx.clang.Archive ;

	local isysroot = $(ISYSROOT:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
	isysroot ?= $(ISYSROOT:Z=$(C.ACTIVE_TOOLCHAIN_*)) ;
	if $(isysroot) {
		#libFlags += -syslibroot $(isysroot:C) ;
	}
}


rule C.macosx._SharedLibraryFromObjects_LinkFlags {
	linkRule = C.macosx.clang.Link ;

	local isysroot = $(ISYSROOT:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
	isysroot ?= $(ISYSROOT:Z=$(C.ACTIVE_TOOLCHAIN_*)) ;

	local architecture = $(C.ARCHITECTURE:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
	architecture ?= $(C.ARCHITECTURE:Z=$(C.ACTIVE_TOOLCHAIN_*)) ;

	linkFlags += "-isysroot $(isysroot:C)" ;
	linkFlags += "-arch $(architecture)" ;

	if module in $(OPTIONS) {
		linkFlags += -bundle -undefined dynamic_lookup -fPIC ;
	} else {
		local installName =
			$(INSTALL_NAME_PATH:Z=$(C.ACTIVE_TOOLCHAIN_TARGET))
			$(INSTALL_NAME_PATH:Z=$(C.ACTIVE_TOOLCHAIN_*))
		;
		if ! $(installName) {
			installName = $(_t:TD) ;
		} else {
			installName = $(installName[1]) ;
		}
		local outputName = [ C._retrieveOutputName : $(_t:S) ] ;
		installName = $(outputName:BSR=$(installName)) ;
		linkFlags += -dynamiclib -fPIC -install_name $(installName) ;
	}

	linkFlags += "-framework $(FRAMEWORKS:Z=$(C.ACTIVE_TOOLCHAIN_TARGET))" ;
}


if $(TARGETINFO_LOCATE) {

rule macosx.XIB {

}

rule C.macosx.SetTaskAllow {
}

rule C.macosx.CodeSign TARGET : PROVISIONING_PROFILE {
	Contents += "Projects[ [[C.*]] ].IOS_SIGNING_IDENTITY[ [[$(C.PLATFORM)]] ][ [[$(C.CONFIG)]] ] = [[$(PROVISIONING_PROFILE)]]

" ;
}


rule C._ApplicationTargetInfo {
}

} else {

rule macosx.XIB PARENT : SOURCES : TARGET_DIRECTORY {
	PARENT = [ C.ActiveTarget $(PARENT) ] ;

	SOURCES = $(SOURCES:G=$(C.ACTIVE_TOOLCHAIN_TARGET_GRIST)) ;
	SEARCH on $(SOURCES) += $(SEARCH_SOURCE) ;

	local targets = $(SOURCES:S=.nib) ;

	MakeLocate $(targets) : $(TARGET_DIRECTORY) ;
	Clean $(C.ACTIVE_TOOLCHAIN_CLEAN_TARGET) : $(targets) ;

	Depends $(C.ACTIVE_TOOLCHAIN_TARGET) : $(targets) ;

	local source ;
	for source in $(SOURCES) {
		local target = $(source:S=.nib) ;
		Depends $(target) : $(source) ;

		C.macosx._CompileXIB $(target) : $(source) : $(C.COMPILER_SUITE_SYMBOL) ;
	}
}


	#/Developer/usr/bin/ibtool --errors --warnings --notices --output-format human-readable-text --compile $(1:C) $(2:C)
actions C.macosx._CompileXIB
{
	PATH=$(MACOSX_SDK_DEVELOPER_ROOT)/usr/bin:$PATH
	/Applications/Xcode.app/Contents/Developer/usr/bin/ibtool --errors --warnings --notices --output-format human-readable-text --compile $(1:C) $(2:C)
}


} # TARGETINFO_LOCATE


rule macosx.Storyboard TARGET : SOURCES {
    TARGET = [ ActiveTarget $(TARGET) ] ;

    SOURCES = $(SOURCES:G=$(C.ACTIVE_TOOLCHAIN_TARGET_GRIST)) ;
    SEARCH on $(SOURCES) += $(SEARCH_SOURCE) ;

    local LANGUAGE_SUBDIRECTORY = $(SOURCES[1]:TD) ;
    LANGUAGE_SUBDIRECTORY = $(LANGUAGE_SUBDIRECTORY:BS) ;

	if $(TARGETINFO_LOCATE) {
		local prefix = "Projects[ [[$(C.ACTIVE_TARGET)]] ]" ;
		Contents += "$(prefix).Sources = concat($(prefix).Sources, {$(NEWLINE)" ;
			Contents += "$(TAB)[[$(SOURCES:T)]],$(NEWLINE)" ;
		Contents += "})$(NEWLINE)" ;
	}
}


rule macosx.Storyboards TARGET : LANGUAGE_DIRECTORY : STORYBOARD_FILES {
    LANGUAGE_DIRECTORY = $(LANGUAGE_DIRECTORY:R=$(SUBDIR)) ;
    local storyboards = [ Glob $(LANGUAGE_DIRECTORY) : *.storyboard ] ;
    storyboards = $(storyboards:BSG=$(C.ACTIVE_TOOLCHAIN_TARGET_GRIST)) ;
    SEARCH on $(storyboards) = $(LANGUAGE_DIRECTORY) ;
    macosx.Storyboard $(TARGET) : $(storyboards) ;

	if ! $(INFO_PLIST_FILE:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) {
		if $(STORYBOARD_FILES[1]) {
			macosx.BundleInfoString : UILaunchStoryboardName : $(STORYBOARD_FILES[1]) ;
		}
		if $(STORYBOARD_FILES[2]) {
			macosx.BundleInfoString : UIMainStoryboardFile : $(STORYBOARD_FILES[2]) ;
		}
	}
}


