rule C.Toolchain.clang.Shared { }

if ! $(TARGETINFO_LOCATE) {

rule C.clang.FDefines { return -D$(<) ; }
rule C.clang.FIncludes { return -I$(<) ; }
rule C.clang.FLibraryPaths { return -L$(<) ; }


rule C.clang._LinkPrebuiltLibraries {
    local lib ;
    for lib in $(gristedLibraries) {
        if ! $(lib:D) {
            BINDING on $(lib) = lib$(lib:B) ;
            EXPAND_TEXT on $(lib) = -l$(lib:G=) ;
            NoCare $(lib) ;
        }
    }
}

rule C.clang._C++Exceptions {
    FLAGS_TO_REMOVE on $(C.ACTIVE_TOOLCHAIN_TARGET) += -fno-exceptions -fexceptions ;

    if ! $(TYPE)  ||  $(TYPE) = false {
        FLAGS_TO_ADD on $(C.ACTIVE_TOOLCHAIN_TARGET) += -fno-exceptions ;
        FLAGS_TO_ADD on $(C.ACTIVE_TOOLCHAIN_TARGET) -= -fexceptions ;
    } else if $(TYPE) = true {
        FLAGS_TO_ADD on $(C.ACTIVE_TOOLCHAIN_TARGET) += -fexceptions ;
        FLAGS_TO_ADD on $(C.ACTIVE_TOOLCHAIN_TARGET) -= -fno-exceptions ;
    }
}

rule C.clang._C++Standard {
    C++FLAGS on $(C.ACTIVE_TOOLCHAIN_TARGET) += -std=c++$(VERSION) ;
    MMFLAGS on $(C.ACTIVE_TOOLCHAIN_TARGET) += -std=c++$(VERSION) ;
}

rule C.clang._RuntimeTypeHelper {
    if ! $(TYPE)  ||  $(TYPE) = dynamic {
    } else if $(TYPE) = static {
    }
}


rule C.clang._MultiCppCompile_SetupFlags {
    if $(_pch[1])  &&  ! $(_nopch) {
        _flags += -Winvalid-pch ;

        local md5 = [ MD5 $(_flags) ] ;
        local _pchName = @($(_pch[3]:LBS):G=$(C.ACTIVE_TOOLCHAIN_TARGET_GRIST)-$(md5)) ;
        BINDING on $(_pchName) = $(_pch[3]) ;
        local _pchFilename = $(_pchName).gch ;

        if ! $(built-$(_pchName)) {
            built-$(_pchName) = 1 ;

            local pchext = $(_pchName:S) ;
            local pchBUILD_EXT = C.BUILD$(pchext) ;

            MakeLocate $(_pchFilename) : $(LOCATE_TARGET)/$(_pchName:S=:G=)-$(md5) ;

            newsrcs += $(_pchName) ;

            PCHFLAGS on $(_pchFilename) += $($($(pchBUILD_EXT).PCHFLAGS)) ;
            MFLAGS on $(_pchName) = $($(pchBUILD_EXT).RULE) $($(pchBUILD_EXT).SUFOBJ) $($(pchBUILD_EXT).ADD_TO_LINK) $(_flags[5-]) $($($(BUILD_EXT).PCHFLAGS)) -o \"$(_pchFilename:T)\" ;
            if $(C_LIBRARY_SHARED_MODULE) {
                MFLAGS on $(_pchName) += $(SHAREDLIBDEFAULTFLAG:Z=$(C.COMPILER_SUITE_SYMBOL)) ;
            }
            if $(objectForceIncludes[1]) {
                MFLAGS on $(_pchName) += "-include $(objectForceIncludes:G=)" ;
            }

            Depends $(_pchFilename) : $(_pchName) ;
            IgnoreContents $(_pchFilename) ;
            SEARCH on $(_pchName) = $(_hdrs) ;

            # source needs to be scanned for header dependencies
            HDRRULE on $(_pchName) = C.HdrRule ;
            HDRSCAN on $(_pchName) = $(C.HDRPATTERN) ;
            HDRGRIST on $(_pchName) = $(C.ACTIVE_TOOLCHAIN_TARGET_GRIST) ;
            HDRSEARCH on $(_pchName) = $(_hdrs) ;
        }

        _flags += -include $(_pchFilename:T:S=:C) ;

        HDREXTRA on $(_src) += $(_pchName:T) ;

        # if the source should use pch
        if $(_pch[2]) {
            # mark that compilation will depend on it
            Includes $(_src) : $(_pchFilename) ;
        }

        if $(_pch[3]) {
            #Depends $(_obj) : $(_pchFilename) ;
        }
    }

    if $(objectForceIncludes[1]) {
        SEARCH on $(objectForceIncludes) = $(_hdrs) ;
        _flags += "-include $(objectForceIncludes:G=)" ;
    }

    _flags += "-o \"$(_obj:T)\"" ;

    if $(C_LIBRARY_SHARED_MODULE) {
        _flags += $(SHAREDLIBDEFAULTFLAG:Z=$(C.COMPILER_SUITE_SYMBOL)) ;
    }
}

rule C.clang._SharedLibraryFromObjects_ExportLib {
    local _actiontlib = @($(TARGET)$(suflib):G=$(C.ACTIVE_TOOLCHAIN_TARGET_GRIST)!inner) ;
    BINDING on $(_actiontlib) = [ C._retrieveOutputName : $(_t:S) ] ;
    ForceContentsOnly $(_actiontlib) ;
    MakeLocate $(_actiontlib) : $(outputPath) ;
    _linkTargets += $(_actiontlib) ;

    BINDING on $(_tlib) = [ C._retrieveOutputName : $(_t:S) ] ;
    MakeLocate $(_tlib) : $(outputPath) ;
    Depends $(C.ACTIVE_TOOLCHAIN_TARGET) : $(_tlib) : $(_actiontlib) $(_t) ;
    NotFile $(_tlib) ;		# Turn this off for export libraries.
    __BUILT_LIBRARY on $(_tlib) = true ;
    ForceContentsOnly $(_tlib) ;

#			LinkFlags $(TARGET) : -Wl,--out-implib,$(_tlib:T) ;
}

rule C.clang._SharedLibraryFromObjects_LinkFlags {
    if module in $(OPTIONS) {
        linkFlags += -shared $(SHAREDLIBDEFAULTFLAG:Z=$(C.COMPILER_SUITE_SYMBOL)) ;
    } else {
        on $(TARGET) linkFlags += -shared $(SHAREDLIBDEFAULTFLAG:Z=$(C.COMPILER_SUITE_SYMBOL)) ;
    }
}


actions updated together piecemeal C.clang.Archive {
    "$(C.AR)" $(LIBFLAGS) $(<:C) $(>:C)
}


#
# NOARUPDATE - can't update an archive
#

if $(NOARUPDATE) {
    actions C.clang.Archive {
        "$(C.AR)" $(LIBFLAGS) $(<:C) $(>:C)
    }
}


actions C.clang.Link {
	$(C.LINK:C) $(LINKFLAGS) -o $(<[1]:C) @^^^($(>:J=$(NEWLINE))) $(NEEDLIBS:TC) $(LINKLIBS:TC)
}


actions updated response C.clang.CC {
	$(C.CC:C) -c $(MFLAGS) $(>:C)
}


actions updated response C.clang.C++ {
	$(C.C++:C) -c $(MFLAGS) $(>:C)
}


actions updated response C.clang.PCH {
	$(C.C++:C) -c $(MFLAGS) $(>:C)
}


} # TARGETINFO_LOCATE

