rule C.Toolchain.vc.win64.Detect COMPILER {
    COMPILER = [ C.Toolchain.vc.Detect $(COMPILER) ] ;
    if ! $(COMPILER) {
        return ;
    }

    local MSVCNT = $(MSVCNT:Z=$(C.COMPILER_SUITE_SYMBOL)) ;
    local MSSDK ;
    local MSSDK_BINDIR ;
    local MSSDK_STDHDRS ;
    local MSSDK_LINKDIRECTORIES ;
    switch $(COMPILER) {

        case vs2015 :
			if $(VC14_ROOT) {
				MSSDK81 = $(VC14_ROOT)/8.1 ;
				MSSDK = $(VC14_ROOT)/10 ;
			}
			else {
				local key = HKEY_LOCAL_MACHINE SOFTWARE Microsoft "Windows Kits" "Installed Roots" KitsRoot81 ;
				MSSDK81 = [ W32_GETREG $(key) ] ;
				key = HKEY_LOCAL_MACHINE SOFTWARE Microsoft "Windows Kits" "Installed Roots" KitsRoot10 ;
				MSSDK = [ W32_GETREG $(key) ] ;
				MSSDK ?= $(MSVCNT) ;
			}
			
			MSSDK_BINDIR = "$(MSSDK)/bin/x64" ;
			
			local inc_dir ;
			if $(C.COMPILER_TOOLSET) = clang {
				inc_dir = "$(MSVCNT)/Clang 3.7/include" ;
			}
			
			MSSDK_STDHDRS =
				$(inc_dir)
				$(MSVCNT)/include
				$(MSSDK)/Include/10.0.10150.0/ucrt
				$(MSSDK81)/Include/shared
				$(MSSDK81)/Include/um
				$(MSSDK81)/Include/winrt
			;
				
			MSSDK_LINKDIRECTORIES =
				$(MSVCNT)/lib/amd64
				$(MSSDK)/lib/10.0.10150.0/ucrt/x64
				$(MSSDK81)/lib/winv6.3/um/x64
			;

        case vs2013 :
            local key = HKEY_LOCAL_MACHINE SOFTWARE Microsoft "Windows Kits" "Installed Roots" KitsRoot81 ;
            MSSDK = [ W32_GETREG $(key) ] ;
            MSSDK ?= $(MSVCNT) ;
            MSSDK_BINDIR = "$(MSSDK)/bin/x64" ;
            MSSDK_STDHDRS = "$(MSVCNT)/include" "$(MSSDK)/Include/shared" "$(MSSDK)/Include/um" "$(MSSDK)/Include/winrt" ;
            MSSDK_LINKDIRECTORIES = "$(MSVCNT)/lib/amd64" "$(MSSDK)/lib/winv6.3/um/x64" ;

        case vs2012 :
            local key = HKEY_LOCAL_MACHINE SOFTWARE Microsoft "Windows Kits" "Installed Roots" KitsRoot ;
            MSSDK = [ W32_GETREG $(key) ] ;
            MSSDK ?= $(MSVCNT) ;
            MSSDK_BINDIR = "$(MSSDK)/bin/x64" ;
            MSSDK_STDHDRS = "$(MSVCNT)/include" "$(MSSDK)/include/shared" "$(MSSDK)/include/um" "$(MSSDK)/include/winrt" ;
            MSSDK_LINKDIRECTORIES = "$(MSVCNT)/lib/amd64" "$(MSSDK)/lib/win8/um/x64" ;

        case vs2010 :
            local key = HKEY_LOCAL_MACHINE SOFTWARE Microsoft "Microsoft SDKs" Windows CurrentInstallFolder ;
            MSSDK = [ W32_GETREG $(key) ] ;
            MSSDK ?= $(MSVCNT) ;
            MSSDK_BINDIR = "$(MSSDK)/bin" ;
            MSSDK_STDHDRS = "$(MSVCNT)/include" "$(MSSDK)/Include" ;
            MSSDK_LINKDIRECTORIES = "$(MSVCNT)/lib/amd64" "$(MSSDK)/Lib/x64" ;

        case vs2008 :
            local key = HKEY_LOCAL_MACHINE SOFTWARE Microsoft "Microsoft SDKs" Windows CurrentInstallFolder ;
            MSSDK = [ W32_GETREG $(key) ] ;
            MSSDK ?= $(MSVCNT) ;
            MSSDK_BINDIR = "$(MSSDK)/bin" ;
            MSSDK_STDHDRS = "$(MSVCNT)/include" "$(MSSDK)/Include" ;
            MSSDK_LINKDIRECTORIES = "$(MSVCNT)/lib/amd64" "$(MSSDK)/Lib/x64" ;

        case * :
            Exit ** Win64 support has not been implemented in Jam for $(COMPILER). ;
    }

    local MSVCBIN = "$(MSVCNT)/bin/amd64/" ;
	local CLANGBIN = "$(MSVCNT)/Clang 3.7/bin/x86/" ;
    MSVCBIN on $(C.COMPILER_SUITE_SYMBOL) = $(MSVCBIN) ;
	CLANGBIN on $(C.COMPILER_SUITE_SYMBOL) = $(CLANGBIN) ;
    MSSDK on $(C.COMPILER_SUITE_SYMBOL) = $(MSSDK) ;
    MSSDK_BINDIR on $(C.COMPILER_SUITE_SYMBOL) = $(MSSDK_BINDIR) ;
    MSSDK_STDHDRS on $(C.COMPILER_SUITE_SYMBOL) = $(MSSDK_STDHDRS) ;
    MSSDK_LINKDIRECTORIES on $(C.COMPILER_SUITE_SYMBOL) = $(MSSDK_LINKDIRECTORIES) ;
	
	if $(C.COMPILER_TOOLSET) = clang {
	    C.CC on $(C.COMPILER_SUITE_SYMBOL)		= $(CLANGBIN)clang ;
		C.C++ on $(C.COMPILER_SUITE_SYMBOL)     = $(CLANGBIN)clang ;
	}
	else {
		C.CC on $(C.COMPILER_SUITE_SYMBOL)      = $(MSVCBIN)cl ;
		C.C++ on $(C.COMPILER_SUITE_SYMBOL)     = $(MSVCBIN)cl ;
	}
	
    C.AR on $(C.COMPILER_SUITE_SYMBOL)          = $(MSVCBIN)lib ;
    C.LINK on $(C.COMPILER_SUITE_SYMBOL)        = $(MSVCBIN)link ;
    C.MT on $(C.COMPILER_SUITE_SYMBOL)          = $(MSSDK_BINDIR)/mt ;
    C.RC on $(C.COMPILER_SUITE_SYMBOL)          = $(MSSDK_BINDIR)/RC ;
    C.STDHDRS on $(C.COMPILER_SUITE_SYMBOL)     = $(MSSDK_STDHDRS) ;
    C.STDLINKDIRECTORIES on $(C.COMPILER_SUITE_SYMBOL) = $(MSSDK_LINKDIRECTORIES) ;

    C._ApplicationFromObjects_Setup on $(C.COMPILER_SUITE_SYMBOL) = C.vc._ApplicationFromObjects_Setup ;
    C._ApplicationFromObjects_CleanIntermediates on $(C.COMPILER_SUITE_SYMBOL) = C.vc._ApplicationFromObjects_CleanIntermediates ;
    C._ApplicationFromObjects_LinkFlags on $(C.COMPILER_SUITE_SYMBOL) = C.vc._ApplicationFromObjects_LinkFlags ;
    C._ApplicationFromObjects_PostBuild on $(C.COMPILER_SUITE_SYMBOL) = ;
    C._ApplicationFromObjects_Setup on $(C.COMPILER_SUITE_SYMBOL) = C.vc._ApplicationFromObjects_Setup ;
    C._C++Exceptions on $(C.COMPILER_SUITE_SYMBOL) = C.vc._C++Exceptions ;
    C._LibraryFromObjects_LibFlags on $(C.COMPILER_SUITE_SYMBOL) = ;
    C._LinkPrebuiltLibraries on $(C.COMPILER_SUITE_SYMBOL) = ;
			
	if $(C.COMPILER_TOOLSET) = cl {
		C._MultiCppCompile_PchDeps on $(C.COMPILER_SUITE_SYMBOL) = C.vc._MultiCppCompile_PchDeps ;
		C._MultiCppCompile_PostCompile on $(C.COMPILER_SUITE_SYMBOL) = C.vc._MultiCppCompile_PostCompile ;
		C._MultiCppCompile_PreCompile on $(C.COMPILER_SUITE_SYMBOL) = C.vc._MultiCppCompile_PreCompile ;
		C._MultiCppCompile_SetupFlags on $(C.COMPILER_SUITE_SYMBOL) = C.vc._MultiCppCompile_SetupFlags ;
	}
	if $(C.COMPILER_TOOLSET) = clang {
		C._MultiCppCompile_SetupFlags on $(C.COMPILER_SUITE_SYMBOL) = C.vcclang._MultiCppCompile_SetupFlags ;
	}
	
    C._RuntimeTypeHelper on $(C.COMPILER_SUITE_SYMBOL) = C.vc._RuntimeTypeHelper ;
    C._SharedLibraryFromObjects_CleanIntermediates on $(C.COMPILER_SUITE_SYMBOL) = C.vc._SharedLibraryFromObjects_CleanIntermediates ;
    C._SharedLibraryFromObjects_ExportLib on $(C.COMPILER_SUITE_SYMBOL) = C.vc._SharedLibraryFromObjects_ExportLib ;
    C._SharedLibraryFromObjects_LinkFlags on $(C.COMPILER_SUITE_SYMBOL) = C.vc._SharedLibraryFromObjects_LinkFlags ;
    C._SharedLibraryFromObjects_PostBuild on $(C.COMPILER_SUITE_SYMBOL) = ;
    C._SharedLibraryFromObjects_RegServer on $(C.COMPILER_SUITE_SYMBOL) = C.vc._SharedLibraryFromObjects_RegServer ;
    C._SharedLibraryFromObjects_UnRegServer on $(C.COMPILER_SUITE_SYMBOL) = C.vc._SharedLibraryFromObjects_UnRegServer ;
    C._SharedLibraryFromObjects_Setup on $(C.COMPILER_SUITE_SYMBOL) = C.vc._SharedLibraryFromObjects_Setup ;
}

VSPLATFORMMAP.win64 = x64 ;
VSNATIVEPLATFORM.win64 = 1 ;
