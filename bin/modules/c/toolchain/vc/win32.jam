rule C.Toolchain.vc.win32.FindHighestValidSDKVersion {
    local dirs = [ Glob $(MSSDK)/Include : */ ] ;
    local versions = [ Match 10\.0\.(.*)\.0 : $(dirs) ] ;
    local highestDir ;
    local dir ;
    for dir in $(dirs) {
        local windows.h = [ Glob $(dir)um : Windows.h ] ;
        if $(windows.h) {
            local version = [ Match 10\.0\.(.*)\.0 : $(dir) ] ;
            local highestVersion = [ Match 10\.0\.(.*)\.0 : $(highestDir) ] ;
            if ! $(highestVersion) {
                highestVersion = 0 ;
            }
            if [ Math $(version) ">" $(highestVersion) ] = 1 {
                highestDir = $(dir) ;
            }
        }
    }

    local highestVersion = $(highestDir:P) ;
    return $(highestVersion:D=) ;
}


rule C.Toolchain.vc.win32.Detect COMPILER {
    COMPILER = [ C.Toolchain.vc.Detect $(COMPILER) ] ;
    if ! $(COMPILER) {
        return ;
    }

    local MSVCNT = $(MSVCNT:Z=$(C.COMPILER_SUITE_SYMBOL)) ;
    local MSSDK ;
    local MSSDK_BINDIR ;
    local MSSDK_STDHDRS ;
    local MSSDK_LINKDIRECTORIES ;
    local MSVCBIN ;
    local RC ;
    local rc_nologo ;
    switch $(COMPILER) {
        case vs2022 :
            local key = HKEY_LOCAL_MACHINE SOFTWARE Microsoft "Windows Kits" "Installed Roots" KitsRoot10 ;
            MSSDK10 = [ W32_GETREG $(key) ] ;
            MSSDK = $(MSSDK10) ;

            local MSSDK_VERSION = [ C.Toolchain.vc.win32.FindHighestValidSDKVersion ] ;
            MSSDK_STDHDRS =
                $(MSVCNT)/include
                $(MSVCNT)/../../../Auxiliary/VS/include
                $(MSSDK)/Include/$(MSSDK_VERSION)/ucrt
                $(MSSDK)/Include/$(MSSDK_VERSION)/um
                $(MSSDK)/Include/$(MSSDK_VERSION)/shared
                $(MSSDK)/Include/$(MSSDK_VERSION)/winrt
            ;
            MSSDK_LINKDIRECTORIES =
                $(MSVCNT)/lib/x86
                $(MSVCNT)/lib/onecore/x86
                $(MSSDK)/lib/$(MSSDK_VERSION)/ucrt/x86
                $(MSSDK)/lib/$(MSSDK_VERSION)/um/x86
            ;
            MSVCBIN = "$(MSVCNT)/bin/HostX86/x86/" ;
            RC = $(MSSDK)/bin/$(MSSDK_VERSION)/x86/rc ;
            rc_nologo = /nologo ;

        case vs2019 :
            local key = HKEY_LOCAL_MACHINE SOFTWARE Microsoft "Windows Kits" "Installed Roots" KitsRoot10 ;
            MSSDK10 = [ W32_GETREG $(key) ] ;
            key = HKEY_LOCAL_MACHINE SOFTWARE Microsoft "Windows Kits" "Installed Roots" KitsRoot10 ;
            MSSDK = [ W32_GETREG $(key) ] ;
            MSSDK ?= $(MSVCNT) ;
            MSSDK_BINDIR = "$(MSSDK)/bin/x86" ;

            local MSSDK_VERSION = [ C.Toolchain.vc.win32.FindHighestValidSDKVersion ] ;
            MSSDK_STDHDRS =
                $(MSVCNT)/include
                $(MSVCNT)/../../../Auxiliary/VS/include
                $(MSSDK)/Include/$(MSSDK_VERSION)/ucrt
                $(MSSDK)/Include/$(MSSDK_VERSION)/um
                $(MSSDK)/Include/$(MSSDK_VERSION)/shared
                $(MSSDK)/Include/$(MSSDK_VERSION)/winrt
            ;
            MSSDK_LINKDIRECTORIES =
                $(MSVCNT)/lib/x86
                $(MSVCNT)/lib/onecore/x86
                $(MSSDK)/lib/$(MSSDK_VERSION)/ucrt/x86
                $(MSSDK)/lib/$(MSSDK_VERSION)/um/x86
            ;
            MSVCBIN = "$(MSVCNT)/bin/HostX86/x86/" ;
            RC = $(MSSDK)/bin/x86/rc ;
            rc_nologo = /nologo ;

        case vs2017 :
            local key = HKEY_LOCAL_MACHINE SOFTWARE Microsoft "Windows Kits" "Installed Roots" KitsRoot10 ;
            MSSDK10 = [ W32_GETREG $(key) ] ;
            key = HKEY_LOCAL_MACHINE SOFTWARE Microsoft "Windows Kits" "Installed Roots" KitsRoot10 ;
            MSSDK = [ W32_GETREG $(key) ] ;
            MSSDK ?= $(MSVCNT) ;
            MSSDK_BINDIR = "$(MSSDK)/bin/x86" ;
            local MSSDK_VERSION = [ C.Toolchain.vc.win32.FindHighestValidSDKVersion ] ;
            MSSDK_STDHDRS =
                $(MSVCNT)/include
                $(MSVCNT)/../../../Auxiliary/VS/include
                $(MSSDK)/Include/$(MSSDK_VERSION)/ucrt
                $(MSSDK)/Include/$(MSSDK_VERSION)/um
                $(MSSDK)/Include/$(MSSDK_VERSION)/shared
                $(MSSDK)/Include/$(MSSDK_VERSION)/winrt
            ;
            MSSDK_LINKDIRECTORIES =
                $(MSVCNT)/lib/x86
                $(MSSDK)/lib/$(MSSDK_VERSION)/ucrt/x86
                $(MSSDK)/lib/$(MSSDK_VERSION)/um/x86
            ;
            MSVCBIN = "$(MSVCNT)/bin/HostX86/x86/" ;
            RC = $(MSSDK)/bin/x86/rc ;
            rc_nologo = /nologo ;

        case vs2015 :
            local key = HKEY_LOCAL_MACHINE SOFTWARE Microsoft "Windows Kits" "Installed Roots" KitsRoot81 ;
            MSSDK81 = [ W32_GETREG $(key) ] ;
            local key = HKEY_LOCAL_MACHINE SOFTWARE Microsoft "Windows Kits" "Installed Roots" KitsRoot10 ;
            MSSDK = [ W32_GETREG $(key) ] ;
            MSSDK ?= $(MSVCNT) ;
            MSSDK_BINDIR = "$(MSSDK81)/bin/x86" ;
            local MSSDK_VERSION = [ C.Toolchain.vc.win32.FindHighestValidSDKVersion ] ;
            MSSDK_STDHDRS =
                $(MSVCNT)/include
                $(MSSDK)/Include/$(MSSDK_VERSION)/ucrt
                $(MSSDK81)/Include/shared
                $(MSSDK81)/Include/um
                $(MSSDK81)/Include/winrt
            ;
            MSSDK_LINKDIRECTORIES =
                $(MSVCNT)/lib
                $(MSSDK)/lib/$(MSSDK_VERSION)/ucrt/x86
                $(MSSDK81)/lib/winv6.3/um/x86
            ;
            RC = $(MSSDK_BINDIR)/rc ;
            rc_nologo = /nologo ;

        case vs2013 :
            local key = HKEY_LOCAL_MACHINE SOFTWARE Microsoft "Windows Kits" "Installed Roots" KitsRoot81 ;
            MSSDK = [ W32_GETREG $(key) ] ;
            MSSDK ?= $(MSVCNT) ;
            MSSDK_BINDIR = "$(MSSDK)/bin/x86" ;
            MSSDK_STDHDRS = "$(MSVCNT)/include" "$(MSSDK)/Include/shared" "$(MSSDK)/Include/um" "$(MSSDK)/Include/winrt" ;
            MSSDK_LINKDIRECTORIES = "$(MSVCNT)/lib" "$(MSSDK)/lib/winv6.3/um/x86" ;
            RC = $(MSSDK)/bin/x86/rc ;
            rc_nologo = /nologo ;
            if [ Glob $(MSVCNT)/bin/amd64_x86 : cl.exe ] {
                MSVCBIN = $(MSVCNT)/bin/amd64_x86/ ;
                MSVCNT_BIN_PATH on $(C.COMPILER_SUITE_SYMBOL) += $(MSVCNT)/bin/amd64_x86 $(MSVCNT)/bin/amd64 ;
            }

        case vs2012 :
            local key = HKEY_LOCAL_MACHINE SOFTWARE Microsoft "Windows Kits" "Installed Roots" KitsRoot ;
            MSSDK = [ W32_GETREG $(key) ] ;
            MSSDK ?= $(MSVCNT) ;
            MSSDK_BINDIR = "$(MSSDK)/bin/x86" ;
            MSSDK_STDHDRS = "$(MSVCNT)/include" "$(MSSDK)/include/shared" "$(MSSDK)/include/um" "$(MSSDK)/include/winrt" ;
            MSSDK_LINKDIRECTORIES = "$(MSVCNT)/lib" "$(MSSDK)/lib/win8/um/x86" ;
            RC = $(MSSDK)/bin/x86/rc ;
            rc_nologo = /nologo ;

        case vs2010 :
            local key = HKEY_LOCAL_MACHINE SOFTWARE Microsoft "Microsoft SDKs" Windows v7.0a InstallationFolder ;
            MSSDK = [ W32_GETREG $(key) ] ;
            MSSDK ?= $(MSVCNT) ;
            MSSDK_BINDIR = "$(MSSDK)/bin" ;
            MSSDK_STDHDRS = "$(MSVCNT)/include" "$(MSSDK)/Include" ;
            MSSDK_LINKDIRECTORIES = "$(MSVCNT)/lib" "$(MSSDK)/Lib" ;
            RC = $(MSSDK)/bin/RC ;
            rc_nologo = /nologo ;

        case vs2008 :
            local key = HKEY_LOCAL_MACHINE SOFTWARE Microsoft "Microsoft SDKs" Windows CurrentInstallFolder ;
            MSSDK = [ W32_GETREG $(key) ] ;
            MSSDK ?= $(MSVCNT) ;
            MSSDK_BINDIR = "$(MSSDK)/bin" ;
            MSSDK_STDHDRS = "$(MSVCNT)/include" "$(MSSDK)/Include" ;
            MSSDK_LINKDIRECTORIES = "$(MSVCNT)/lib" "$(MSSDK)/Lib" ;
            RC = $(MSSDK)/bin/RC ;

        case vs2005 :
            MSSDK = $(MSVCNT) ;
            MSSDK_BINDIR = "$(MSSDK)/bin" ;
            MSSDK_STDHDRS = "$(MSSDK)/include" "$(MSSDK)/PlatformSDK/Include" ;
            MSSDK_LINKDIRECTORIES = "$(MSVCNT)/lib" "$(MSVCNT)/PlatformSDK/lib" ;
            RC = $(MSSDK)/bin/RC ;

        case vs2003 :
            MSSDK = $(MSVCNT) ;
            MSSDK_BINDIR = "$(MSSDK)/bin" ;
            MSSDK_STDHDRS = "$(MSSDK)/include" "$(MSSDK)/PlatformSDK/Include" ;
            MSSDK_LINKDIRECTORIES = "$(MSVCNT)/lib" "$(MSVCNT)/PlatformSDK/lib" ;
            RC = $(MSSDK)/bin/RC ;

        case vs2002 :
            MSSDK = $(MSVCNT) ;
            MSSDK_BINDIR = "$(MSSDK)/bin" ;
            MSSDK_STDHDRS = "$(MSSDK)/include" "$(MSSDK)/PlatformSDK/Include" ;
            MSSDK_LINKDIRECTORIES = "$(MSVCNT)/lib" "$(MSVCNT)/PlatformSDK/lib" ;
            RC = $(MSSDK)/bin/RC ;

        case vc6 :
            local key = HKEY_LOCAL_MACHINE SOFTWARE Microsoft MicrosoftSDK Directories "Install Dir" ;
            MSSDK = [ W32_GETREG $(key) ] ;
            MSSDK ?= $(MSVCNT) ;
            MSSDK_BINDIR = "$(MSSDK)/bin" ;
            MSSDK_STDHDRS = "$(MSSDK)/include" "$(MSVCNT)/Include" ;
            MSSDK_LINKDIRECTORIES = "$(MSSDK)/Lib" "$(MSVCNT)/Lib" ;
            RC = $(MSVCNT)/../Common/MSDev98/Bin/rc ;
    }

    MSVCBIN on $(C.COMPILER_SUITE_SYMBOL) = $(MSVCBIN) ;
    MSSDK on $(C.COMPILER_SUITE_SYMBOL) = $(MSSDK) ;
    MSSDK_BINDIR on $(C.COMPILER_SUITE_SYMBOL) = $(MSSDK_BINDIR) ;
    MSSDK_STDHDRS on $(C.COMPILER_SUITE_SYMBOL) = $(MSSDK_STDHDRS) ;
    MSSDK_LINKDIRECTORIES on $(C.COMPILER_SUITE_SYMBOL) = $(MSSDK_LINKDIRECTORIES) ;

    C.AR on $(C.COMPILER_SUITE_SYMBOL)          = $(MSVCBIN)lib ;
    C.CC on $(C.COMPILER_SUITE_SYMBOL)          = $(MSVCBIN)cl ;
    C.C++ on $(C.COMPILER_SUITE_SYMBOL)         = $(MSVCBIN)cl ;
    C.LINK on $(C.COMPILER_SUITE_SYMBOL)        = $(MSVCBIN)link ;
    C.MT on $(C.COMPILER_SUITE_SYMBOL)          = $(MSSDK_BINDIR)/mt ;
    C.RC on $(C.COMPILER_SUITE_SYMBOL)          ?= $(RC) ;
    C.RC_NOLOGO on $(C.COMPILER_SUITE_SYMBOL)   ?= $(rc_nologo) ;
    C.STDHDRS on $(C.COMPILER_SUITE_SYMBOL)     = $(MSSDK_STDHDRS) ;
    C.STDLINKDIRECTORIES on $(C.COMPILER_SUITE_SYMBOL) = $(MSSDK_LINKDIRECTORIES) ;

    C._ApplicationFromObjects_CleanIntermediates on $(C.COMPILER_SUITE_SYMBOL) = C.vc._ApplicationFromObjects_CleanIntermediates ;
    C._ApplicationFromObjects_LinkFlags on $(C.COMPILER_SUITE_SYMBOL) = C.vc._ApplicationFromObjects_LinkFlags ;
    C._ApplicationFromObjects_PostBuild on $(C.COMPILER_SUITE_SYMBOL) = ;
    C._ApplicationFromObjects_Setup on $(C.COMPILER_SUITE_SYMBOL) = C.vc._ApplicationFromObjects_Setup ;
    C._C++Exceptions on $(C.COMPILER_SUITE_SYMBOL) = C.vc._C++Exceptions ;
    C._C++Standard on $(C.COMPILER_SUITE_SYMBOL) = C.vc._C++Standard ;
    C._LibraryFromObjects_LibFlags on $(C.COMPILER_SUITE_SYMBOL) = ;
    C._LinkPrebuiltLibraries on $(C.COMPILER_SUITE_SYMBOL) = ;
    C._MultiCppCompile_PchDeps on $(C.COMPILER_SUITE_SYMBOL) = C.vc._MultiCppCompile_PchDeps ;
    C._MultiCppCompile_PostCompile on $(C.COMPILER_SUITE_SYMBOL) = C.vc._MultiCppCompile_PostCompile ;
    C._MultiCppCompile_PreCompile on $(C.COMPILER_SUITE_SYMBOL) = C.vc._MultiCppCompile_PreCompile ;
    C._MultiCppCompile_SetupFlags on $(C.COMPILER_SUITE_SYMBOL) = C.vc._MultiCppCompile_SetupFlags ;
    C._RuntimeTypeHelper on $(C.COMPILER_SUITE_SYMBOL) = C.vc._RuntimeTypeHelper ;
    C._SharedLibraryFromObjects_CleanIntermediates on $(C.COMPILER_SUITE_SYMBOL) = C.vc._SharedLibraryFromObjects_CleanIntermediates ;
    C._SharedLibraryFromObjects_ExportLib on $(C.COMPILER_SUITE_SYMBOL) = C.vc._SharedLibraryFromObjects_ExportLib ;
    C._SharedLibraryFromObjects_LinkFlags on $(C.COMPILER_SUITE_SYMBOL) = C.vc._SharedLibraryFromObjects_LinkFlags ;
    C._SharedLibraryFromObjects_PostBuild on $(C.COMPILER_SUITE_SYMBOL) = ;
    C._SharedLibraryFromObjects_RegServer on $(C.COMPILER_SUITE_SYMBOL) = C.vc._SharedLibraryFromObjects_RegServer ;
    C._SharedLibraryFromObjects_UnRegServer on $(C.COMPILER_SUITE_SYMBOL) = C.vc._SharedLibraryFromObjects_UnRegServer ;
    C._SharedLibraryFromObjects_Setup on $(C.COMPILER_SUITE_SYMBOL) = C.vc._SharedLibraryFromObjects_Setup ;
}

VSPLATFORMMAP.win32 = Win32 ;
VSNATIVEPLATFORM.win32 = 1 ;
