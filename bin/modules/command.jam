REGISTERED_COMMANDS = ;

#LuaString "
#function Command()
#    local name = jam_getvar('NAME')[1]
#    jam_evaluaterule('Always', name)
#    local actionLines = jam_getvar('LINES')
#    local actionLine
#    for index, actionLine in ipairs(actionLines) do
#        jam_action(name .. index, actionLine, { screenoutput = true })
#        jam_evaluaterule(name .. index, name)
#    end
#    jam_evaluaterule('DebugSuppressMakeText')
#end
#" ;
#
#rule Command NAME : LINES {
#    LuaString "Command()" ;
#}

rule Command NAME : LINES : ACTION_MODIFIERS {
    REGISTERED_COMMANDS += $(NAME) ;

    Always $(NAME) ;
    if $(LINES) {
        ACTION_MODIFIERS ?= screenoutput ;
        local actionLine ;
        local index = 1 ;
        for actionLine in $(LINES) {
            local actionName = $(NAME)-----$(index) ;
            local actionString = "actions $(ACTION_MODIFIERS:E="":J=$(SPACE)) $(actionName) { " $(actionLine) " }" ;
            parse $(actionString:J) ;
            ARGS on $(actionName) = $(ARGS) ;
            $(actionName) $(NAME) ;
            index = [ Math $(index) + 1 ] ;
        }
    } else {
        if ! [ ActionExists $(NAME) ] {
            parse "actions $(NAME) { }" ;
        }
        ARGS on $(NAME) = $(ARGS) ;
        $(NAME) $(NAME) ;
    }
    DebugSuppressMakeText ;
}

rule CommandLua NAME : LINES : ACTION_MODIFIERS {
    REGISTERED_COMMANDS += $(NAME) ;

    Always $(NAME) ;
    if $(LINES) {
        local actionLine ;
        local index = 1 ;
        for actionLine in $(LINES) {
            local actionName = $(NAME)-----$(index) ;
            local actionString = "actions lua $(ACTION_MODIFIERS:E="":J=$(SPACE)) $(actionName) { " $(actionLine) " }" ;
            parse $(actionString:J) ;
            ARGS on $(actionName) = $(ARGS) ;
            $(actionName) $(NAME) ;
            index = [ Math $(index) + 1 ] ;
        }
    } else {
        if ! [ ActionExists $(NAME) ] {
            parse "actions $(NAME) { }" ;
        }
        ARGS on $(NAME) = $(ARGS) ;
        $(NAME) $(NAME) ;
    }
    DebugSuppressMakeText ;
}

rule CommandDescription NAME : DESCRIPTION {
    DESCRIPTION on $(NAME) = $(DESCRIPTION) ;
}

actions lua help {
	print('\nAvailable commands:\n')

	local commands = jam_getvar('REGISTERED_COMMANDS')
	table.sort(commands)

	local command
	for _, command in ipairs(commands) do
		print('', command)
	end
}

{
	JRUN.JAM		?= jrun.jam ;
	JRUN.LUA		?= jrun.lua ;

	local currentDirectory = $(CWD) ;
	local foundFile ;
	while 1 {
		foundFile = [ Glob $(currentDirectory) : $(JRUN.JAM) ] ;
		if $(foundFile) {
			break ;
		}
		foundFile = [ Glob $(currentDirectory) : $(JRUN.LUA) ] ;
		if $(foundFile) {
			break ;
		}
		local parentDirectory = $(currentDirectory:P) ;
		if $(parentDirectory) = $(currentDirectory) {
			currentDirectory = ;
			break ;
		}
		currentDirectory = $(parentDirectory) ;
	}

	if $(foundFile) {
		ARGS = $(JAM_COMMAND_LINE_TARGETS[2-] $(JAM_EXTRA_COMMAND_LINE_OPTIONS) ;
		ARGS ?= "" ;
		JAM_COMMAND_LINE_TARGETS = $(JAM_COMMAND_LINE_TARGETS[1]) ;
		if $(JAM_COMMAND_LINE_TARGETS) = all {
			JAM_COMMAND_LINE_TARGETS = help ;
		}
		if $(foundFile:S) = .jam {
			include $(foundFile) ;
		} else if $(foundFile:S) = .lua {
			LuaSupport ;
			LuaFile $(foundFile) ;
		}
	} else {
		Exit ** Unable to find jrun.jam or jrun.lua in the parent directory chain. ;
	}
}
