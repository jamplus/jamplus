if ! $(TARGETINFO_LOCATE)
{

CSCFLAGS.* on * += /noconfig /nowarn:1701,1702 /warn:4 ;
CSCFLAGS.debug on * += /define:DEBUG;TRACE /debug+ /debug:full /optimize- ;

if $(NT)
{
	CSC_COMPILER ?= vs2010 ;
}
else
{
	CSC_COMPILER ?= gmcs ;
}

switch $(CSC_COMPILER)
{
	case vs2005 :
		CSC = "\"$(windir)/Microsoft.NET/Framework/v2.0.50727/Csc.exe\"" ;
		REFERENCEPATHS.* on * +=
				"C:/Program Files/Reference Assemblies/Microsoft/Framework/v3.5"
				$(windir)/Microsoft.NET/Framework/v2.0.50727
		;
		CSCFLAGS.* on * += /errorreport:prompt /filealign:512 ;

	case vs2008 :
		CSC = "\"$(windir)/Microsoft.NET/Framework/v3.5/Csc.exe\"" /nologo ;
		REFERENCEPATHS.* on * +=
				[ W32_GETREG HKEY_LOCAL_MACHINE SOFTWARE Microsoft .NETFramework AssemblyFolders "Microsoft .NET Framework 3.5 Reference Assemblies" "" ]
				$(windir)/Microsoft.NET/Framework/v2.0.50727
		;
		CSCFLAGS.* on * += /errorreport:prompt /filealign:512 ;
		
	case vs2010 :
		CSC = "\"$(windir)/Microsoft.NET/Framework/v4.0.30319/Csc.exe\"" /nologo ;
		REFERENCEPATHS.* on * +=
				[ W32_GETREG HKEY_LOCAL_MACHINE SOFTWARE Microsoft .NETFramework AssemblyFolders "Microsoft .NET Framework 4.0 Reference Assemblies" "" ]
				$(windir)/Microsoft.NET/Framework/v2.0.50727
		;
		CSCFLAGS.* on * += /errorreport:prompt /filealign:512 ;
		
	case gmcs :
		if ! $(Mono_ROOT)  ||  ! $(CSC) {
			if ! $(NT) {
				Mono_ROOT ?= /usr ;
			}

			local PATHS =
				"$(Mono_ROOT:J=$(SPACE))"
			;

			if $(NT) {
				if $(monodir) {
					PATHS += $(monodir) ;
				}

				local PATH_SUFFIXES =
							"2.10.9"
							"3.2.3"
				;

				for PATH_SUFFIX in $(PATH_SUFFIXES) {
					local registryRootPath = [ W32_GETREG HKEY_LOCAL_MACHINE SOFTWARE Novell Mono $(PATH_SUFFIX) SdkInstallRoot ] ;
					PATHS += "$(registryRootPath:/J=$(SPACE))" ;
					local programFilesPath = $(ProgramFiles:/J=$(SPACE))/Mono-$(PATH_SUFFIX) ;
					PATHS += "$(programFilesPath:/J=$(SPACE))" ;
				}
			}

			local gmcs = [ Glob $(PATHS)/bin : gmcs ] ;
			if ! $(gmcs) {
				Exit Mono not found. ;
			}

			Mono_ROOT = [ Match (.+)/bin/gmcs : $(gmcs[1]) ] ;
		
			if $(NT) {
				CSC ?= "\"$(Mono_ROOT)/bin/gmcs.bat\"" ;
			} else {
				CSC ?= $(Mono_ROOT)/bin/gmcs ;
			}
		}
}


rule CSharp.Assembly TARGET : SOURCES : OPTIONS {
	TARGET = [ ActiveTarget $(TARGET) ] ;

	local outputPath = [ CSharp._retrieveOutputPath $(TARGET) ] ;

	local suffixName = SUFEXE ;
	if library in $(OPTIONS) {
		suffixName = SUFSHAREDLIB ;
	}
	local suffix = $($(suffixName):Z=$(C.COMPILER_SUITE_SYMBOL)) ;
	local _t = [ CSharp._retrieveOutputName $(TARGET) : $(suffix) ] ;
	_t = [ C.GristFiles : $(_t) ] ;

	local _s = [ C.GristFiles : $(SOURCES:I=\\.cs) ] ;
	SEARCH on $(_s) = $(SEARCH_SOURCE) ;

	Depends all : $(TARGET) : $(C.ACTIVE_TOOLCHAIN_TARGET) : $(_t) : $(_s) ;
	NotFile $(TARGET) $(C.ACTIVE_TOOLCHAIN_TARGET) ;
	MakeLocate $(_t) : $(outputPath) ;

	Depends clean : clean:$(TARGET) : $(C.ACTIVE_TOOLCHAIN_CLEAN_TARGET) ;
	NotFile clean:$(TARGET) $(C.ACTIVE_TOOLCHAIN_CLEAN_TARGET) ;
	Always clean:$(TARGET) $(C.ACTIVE_TOOLCHAIN_CLEAN_TARGET) ;
	Clean $(C.ACTIVE_TOOLCHAIN_CLEAN_TARGET) : $(_t) : $(_t:S=.pdb) ;

	local ALL_TYPES = $(CONFIG) * ;

	local _flags ;

	local REFERENCEPATHS =
		$(REFERENCEPATHS:Z=$(C.ACTIVE_TOOLCHAIN_TARGET))
		$(REFERENCEPATHS:Z=$(C.ACTIVE_TOOLCHAIN_*))
	;

	local CSCDEFINES =
		$(CSCDEFINES:Z=$(C.ACTIVE_TOOLCHAIN_TARGET))
		$(CSCDEFINES:Z=$(C.ACTIVE_TOOLCHAIN_*))
	;
	_flags += /define:$(CSCDEFINES) ;

	local CSCFLAGS =
		$(CSCFLAGS:Z=$(C.ACTIVE_TOOLCHAIN_TARGET))
		$(CSCFLAGS:Z=$(C.ACTIVE_TOOLCHAIN_*))
	;
	_flags += $(CSCFLAGS) ;

	local needassemblies =
		$(NEEDASSEMBLIES:Z=$(C.ACTIVE_TOOLCHAIN_TARGET))
		$(NEEDASSEMBLIES:Z=$(C.ACTIVE_TOOLCHAIN_*))
	;
	SEARCH on $(needassemblies) = $(REFERENCEPATHS) ;
	_flags += /reference:\"$(needassemblies:T)\" ;

	if console in $(OPTIONS) {
		_flags += /target:exe ;
	} else if windows in $(OPTIONS) {
		_flags += /target:winexe ;
	} else if library in $(OPTIONS) {
		_flags += /target:library ;
	} else if module in $(OPTIONS) {
		_flags += /target:module ;
	} else {
		_flags += /target:exe ;
	}

	MFLAGS on $(_t) = $(_flags) ;
	UseCommandLine $(_t) : $(_flags) ;

	CSharp.Csc $(_t) : $(_s) ;
}


rule CSharp.Application TARGET : SOURCES : OPTIONS {
	if ! ( windows in $(OPTIONS) )  &&  ! ( console in $(OPTIONS) ) {
		OPTIONS += console ;
	}
	CSharp.Assembly $(TARGET) : $(SOURCES) : $(OPTIONS) ;
}


rule CSharp.Library TARGET : SOURCES : OPTIONS {
	CSharp.Assembly $(TARGET) : $(SOURCES) : library $(OPTIONS) ;
}

if $(CSC_COMPILER) in vs2005 vs2008 vs2010 {
	actions CSharp.Csc {
		$(CSC) $(MFLAGS) /out:$(1) $(2:\\)
	}
} else {
	actions CSharp.Csc {
		$(CSC) $(MFLAGS) /out:$(1) $(2)
	}
}

} else {  # $(TARGETINFO_LOCATE)

rule CSharp.Application TARGET : SOURCES : OPTIONS
{
	TARGET = [ ActiveTarget $(TARGET) ] ;
	Workspace $(TARGET) : $(TARGET) : all ;

	Depends all : $(TARGET) ;
	DumpProjectInfo $(TARGET) : $(SOURCES) : app ;
}

rule CSharp.Library TARGET : SOURCES : OPTIONS
{
	TARGET = [ ActiveTarget $(TARGET) ] ;
	Workspace $(TARGET) : $(TARGET) : all ;

	Depends all : $(TARGET) ;
	DumpProjectInfo $(TARGET) : $(SOURCES) : shared ;
}

}


rule CSharp.CscDefines TARGET : DEFINES {
	TARGET = [ ActiveTarget $(TARGET) ] ;
	CSCDEFINES on $(C.ACTIVE_TOOLCHAIN_TARGET) += $(DEFINES) ;
}


rule CSharp.CscFlags TARGET : FLAGS {
	TARGET = [ ActiveTarget $(TARGET) ] ;
	CSCFLAGS on $(C.ACTIVE_TOOLCHAIN_TARGET) += $(FLAGS) ;
}


rule CSharp.ReferenceAssemblies TARGET : ASSEMBLIES {
	TARGET = [ ActiveTarget $(TARGET) ] ;
	ASSEMBLIES = $(ASSEMBLIES:G=$(TARGET)) ;  #TODO
	NEEDASSEMBLIES on $(C.ACTIVE_TOOLCHAIN_TARGET) += $(ASSEMBLIES) ;
}


rule CSharp.ReferencePaths TARGET : PATHS {
	TARGET = [ ActiveTarget $(TARGET) ] ;
	REFERENCEPATHS on $(C.ACTIVE_TOOLCHAIN_TARGET) += $(PATHS:R=$(SUBDIR)) ;
}




########################################################################
########################################################################

rule CSharp._retrieveOutputPath TARGET {
	C.ActiveTarget $(TARGET) ;

	local outputPath = $(LOCATE:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
	outputPath ?= $(LOCATE:Z=$(C.ACTIVE_TOOLCHAIN_*)) ;
	outputPath ?= $(LOCATE_TARGET) ;
	return $(outputPath) ;
}


rule CSharp._retrieveOutputName TARGET : SUFFIX {
	C.ActiveTarget $(TARGET) ;

	local target = $(OUTPUTNAME:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
	target ?= $(C.ACTIVE_TARGET) ;

	local presuffix = $(OUTPUTPOSTFIX:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
	presuffix ?= $(OUTPUTPOSTFIX:Z=$(C.ACTIVE_TOOLCHAIN_*)) ;
	if ! $(presuffix) {
		presuffix = $(C.CONFIG) ;
		if $(presuffix) {
			presuffix = .$(presuffix) ;
		}
	}
	if $(presuffix) = *off* {
		presuffix = ;
	}

	local suffix = $(OUTPUTSUFFIX:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
	suffix ?= $(SUFFIX) ;
	return $(target)$(presuffix:E=)$(suffix:E=) ;
}


rule CSharp.OutputName TARGET : NAME {
	TARGET = [ ActiveTarget $(TARGET) ] ;
	OUTPUTNAME on $(C.ACTIVE_TOOLCHAIN_TARGET) = $(NAME) ;
}


rule CSharp.OutputPath TARGET : OUTPUTPATH {
	TARGET = [ ActiveTarget $(TARGET) ] ;
	LOCATE on $(C.ACTIVE_TOOLCHAIN_TARGET) = $(OUTPUTPATH:R=$(SUBDIR:E="")) ;
}


rule CSharp.OutputPostfix TARGET : POSTFIX {
	TARGET = [ ActiveTarget $(TARGET) ] ;
	OUTPUTPOSTFIX on $(C.ACTIVE_TOOLCHAIN_TARGET) = $(POSTFIX:E=*off*) ;
}


rule CSharp.OutputPostfixClear TARGET {
	TARGET = [ ActiveTarget $(TARGET) ] ;
	OUTPUTPOSTFIX on $(C.ACTIVE_TOOLCHAIN_TARGET) = ;
}


rule CSharp.OutputSuffix TARGET : SUFFIX {
	TARGET = [ ActiveTarget $(TARGET) ] ;
	local NO_DOT_SUFFIX = [ Match \\.?(.+) : $(SUFFIX) ] ;
	SUFFIX = .$(NO_DOT_SUFFIX) ;
	OUTPUTSUFFIX on $(C.ACTIVE_TOOLCHAIN_TARGET) = $(SUFFIX) ;
}




