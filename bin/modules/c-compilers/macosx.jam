rule C.FrameworkDirectories TARGET : FRAMEWORKDIRS {
	TARGET = [ ActiveTarget $(TARGET) ] ;
	C.Flags $(TARGET) : CC	: "-F$(FRAMEWORKDIRS)" ;
	C.Flags $(TARGET) : C++	: "-F$(FRAMEWORKDIRS)" ;
	C.Flags $(TARGET) : M	: "-F$(FRAMEWORKDIRS)" ;
	C.Flags $(TARGET) : MM	: "-F$(FRAMEWORKDIRS)" ;
	C.LinkFlags $(TARGET) : "-F$(FRAMEWORKDIRS)" ;
}


rule C.LinkFrameworks TARGET : FRAMEWORKS {
	TARGET = [ ActiveTarget $(TARGET) ] ;
	C.LinkFlags $(TARGET) : "-framework $(FRAMEWORKS)" ;
}


rule C.WeakLinkFrameworks TARGET : FRAMEWORKS {
	TARGET = [ ActiveTarget $(TARGET) ] ;
	C.LinkFlags $(TARGET) : "-weak_framework $(FRAMEWORKS)" ;
}


rule C.MacOSX_SDK SDK_VERSION {
	local SDK_PLATFORM ;
	SDK_PLATFORM ?= $(PLATFORM) ;

	if $(SDK_PLATFORM) in macosx32 macosx64 {
		SDK_PLATFORM = macosx ;
	}

	local COMPILER_BIN_PATH = $(COMPILER_BIN_PATH:Z=$(C.COMPILER_SUITE_SYMBOL)) ;
	local developerRoot ;
	local isysroot ;
	local flags ;
	local sdkroot ;
	switch $(SDK_PLATFORM) {
		case macosx :
			developerRoot = /Developer/SDKs ;
			SDK_VERSION ?= 10.9 ;
			switch $(SDK_VERSION) {
				case 10.4 :
					isysroot = $(developerRoot)/MacOSX10.4u.sdk ;
					sdkroot = macosx10.4 ;

				case 10.4u :
					isysroot = $(developerRoot)/MacOSX10.4u.sdk ;
					sdkroot = macosx10.4 ;

				case 10.5 :
					isysroot = $(developerRoot)/MacOSX10.5.sdk ;
					sdkroot = macosx10.5 ;

				case 10.6 :
					isysroot = $(developerRoot)/MacOSX10.6.sdk ;
					sdkroot = macosx10.6 ;
				
				case 10.7 :
					isysroot = $(developerRoot)/MacOSX10.7.sdk ;
					sdkroot = macosx10.7 ;
				
				case 10.8 :
					developerRoot = [ Match ([^$(NEWLINE)]*) : [ Shell "xcode-select --print-path" ] ] ;
					isysroot = $(developerRoot)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk ;
					sdkroot = macosx10.8 ;

				case 10.9 :
					developerRoot = [ Match ([^$(NEWLINE)]*) : [ Shell "xcode-select --print-path" ] ] ;
					isysroot = $(developerRoot)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk ;
					sdkroot = macosx10.9 ;

				case * :		Exit "* MacOSX_SDK: Unsupported version $(SDK_VERSION) for SDK platform $(SDK_PLATFORM)." ;
			}
			developerRoot = $(isysroot) ;

		case iphone :
			developerRoot = /Developer/Platforms/iPhoneOS.platform/Developer ;
			SDK_VERSION ?= 7.1 ;
			switch $(SDK_VERSION) {
				case 4.3 :
					isysroot = $(developerRoot)/SDKs/iPhoneOS4.3.sdk ;
					flags += -arch armv6 ;
					sdkroot = iphoneos4.3 ;

				case 5.0 :
					isysroot = $(developerRoot)/SDKs/iPhoneOS5.0.sdk ;
					flags += -arch armv6 ; 
					sdkroot = iphoneos5.0 ;

				case 5.1 :
					isysroot = @(../../SDKs/iPhoneOS5.1.sdk:R=$(COMPILER_BIN_PATH)) ;
					flags += -arch armv6 ; 
					sdkroot = iphoneos5.1 ;

				case 6.0 :
					developerRoot = [ Match ([^$(NEWLINE)]*) : [ Shell "xcode-select --print-path" ] ] ;
					isysroot = $(developerRoot)/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.0.sdk ;
					sdkroot = iphoneos6.0 ;
					flags += -arch armv7 ;

				case 6.1 :
					developerRoot = [ Match ([^$(NEWLINE)]*) : [ Shell "xcode-select --print-path" ] ] ;
					isysroot = $(developerRoot)/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.1.sdk ;
					sdkroot = iphoneos6.1 ;
					flags += -arch armv7s ;

				case 7.0 :
					developerRoot = [ Match ([^$(NEWLINE)]*) : [ Shell "xcode-select --print-path" ] ] ;
					isysroot = $(developerRoot)/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS7.0.sdk ;
					sdkroot = iphoneos7.0 ;
					flags += -arch armv7s ;

				case 7.1 :
					developerRoot = [ Match ([^$(NEWLINE)]*) : [ Shell "xcode-select --print-path" ] ] ;
					isysroot = $(developerRoot)/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS7.1.sdk ;
					sdkroot = iphoneos7.0 ;
					flags += -arch armv7s ;

				case * :		Exit "* MacOSX_SDK: Unsupported version $(SDK_VERSION) for SDK platform $(SDK_PLATFORM)." ;
			}
			flags += -fvisibility=hidden ;

		case iphonesimulator :
			developerRoot = /Developer/Platforms/iPhoneSimulator.platform/Developer ;
			SDK_VERSION ?= 7.1 ;
			switch $(SDK_VERSION) {
				case 4.3 :
					isysroot = $(developerRoot)/SDKs/iPhoneSimulator4.3.sdk ;
					#flags += -D__IPHONE_OS_VERSION_MIN_REQUIRED=30200 ;
					sdkroot = iphoneos4.3 ;

				case 5.0 :
					isysroot = $(developerRoot)/SDKs/iPhoneSimulator5.0.sdk ;
					sdkroot = iphoneos5.0 ;

				case 5.1 :
					isysroot = @(../../../../Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator5.1.sdk:R=$(COMPILER_BIN_PATH)) ;
					sdkroot = iphoneos5.1 ;

				case 6.0 :
					developerRoot = [ Match ([^$(NEWLINE)]*) : [ Shell "xcode-select --print-path" ] ] ;
					isysroot = $(developerRoot)/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator6.0.sdk ;
					sdkroot = iphoneos6.0 ;

				case 6.1 :
					developerRoot = [ Match ([^$(NEWLINE)]*) : [ Shell "xcode-select --print-path" ] ] ;
					isysroot = $(developerRoot)/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator6.1.sdk ;
					sdkroot = iphoneos6.1 ;

				case 7.0 :
					developerRoot = [ Match ([^$(NEWLINE)]*) : [ Shell "xcode-select --print-path" ] ] ;
					isysroot = $(developerRoot)/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator7.0.sdk ;
					sdkroot = iphoneos7.0 ;

				case 7.1 :
					developerRoot = [ Match ([^$(NEWLINE)]*) : [ Shell "xcode-select --print-path" ] ] ;
					isysroot = $(developerRoot)/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator7.1.sdk ;
					sdkroot = iphoneos7.1 ;

				case * :		Exit "* MacOSX_SDK: Unsupported version $(SDK_VERSION) for SDK platform $(SDK_PLATFORM)." ;
			}
			flags += -arch i386 ;
			flags += -fvisibility=hidden ;

		case ipadsimulator :
			developerRoot = /Developer/Platforms/iPhoneSimulator.platform/Developer ;
			SDK_VERSION ?= 7.1 ;
			switch $(SDK_VERSION) {
				case 4.3 :
					isysroot = $(developerRoot)/SDKs/iPhoneSimulator4.3.sdk ;
					#flags += -D__IPHONE_OS_VERSION_MIN_REQUIRED=40300 ;
					flags += -arch i386 ;
					sdkroot = iphoneos4.3 ;

				case 5.0 :
					isysroot = $(developerRoot)/SDKs/iPhoneSimulator5.0.sdk ;
					sdkroot = iphoneos5.0 ;

				case 5.1 :
					isysroot = @(../../../../Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator5.1.sdk:R=$(COMPILER_BIN_PATH)) ;
					sdkroot = iphoneos5.1 ;

				case 6.0 :
					developerRoot = [ Match ([^$(NEWLINE)]*) : [ Shell "xcode-select --print-path" ] ] ;
					isysroot = $(developerRoot)/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator6.0.sdk ;
					sdkroot = iphoneos6.0 ;

				case 6.1 :
					developerRoot = [ Match ([^$(NEWLINE)]*) : [ Shell "xcode-select --print-path" ] ] ;
					isysroot = $(developerRoot)/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator6.1.sdk ;
					sdkroot = iphoneos6.1 ;

				case 7.0 :
					developerRoot = [ Match ([^$(NEWLINE)]*) : [ Shell "xcode-select --print-path" ] ] ;
					isysroot = $(developerRoot)/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator7.0.sdk ;
					sdkroot = iphoneos7.0 ;

				case 7.1 :
					developerRoot = [ Match ([^$(NEWLINE)]*) : [ Shell "xcode-select --print-path" ] ] ;
					isysroot = $(developerRoot)/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator7.1.sdk ;
					sdkroot = iphoneos7.1 ;

				case * :		Exit "* MacOSX_SDK: Unsupported version $(SDK_VERSION) for SDK platform $(SDK_PLATFORM)." ;
			}
			flags += -arch i386 ;
			flags += -fvisibility=hidden ;

		case ipad :
			developerRoot = /Developer/Platforms/iPhoneOS.platform/Developer ;
			SDK_VERSION ?= 7.1 ;
			switch $(SDK_VERSION) {
				case 4.3 :
					isysroot = $(developerRoot)/SDKs/iPhoneOS4.3.sdk ;
					sdkroot = iphoneos4.3 ;

				case 5.0 :
					isysroot = $(developerRoot)/SDKs/iPhoneOS5.0.sdk ;
					sdkroot = iphoneos5.0 ;

				case 5.1 :
					isysroot = @(../../SDKs/iPhoneOS5.1.sdk:R=$(COMPILER_BIN_PATH)) ;
					sdkroot = iphoneos5.1 ;

				case 6.0 :
					developerRoot = [ Match ([^$(NEWLINE)]*) : [ Shell "xcode-select --print-path" ] ] ;
					isysroot = $(developerRoot)/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.0.sdk ;
					sdkroot = iphoneos6.0 ;

				case 6.1 :
					developerRoot = [ Match ([^$(NEWLINE)]*) : [ Shell "xcode-select --print-path" ] ] ;
					isysroot = $(developerRoot)/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.1.sdk ;
					sdkroot = iphoneos6.1 ;

				case 7.0 :
					developerRoot = [ Match ([^$(NEWLINE)]*) : [ Shell "xcode-select --print-path" ] ] ;
					isysroot = $(developerRoot)/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS7.0.sdk ;
					sdkroot = iphoneos7.0 ;

				case 7.1 :
					developerRoot = [ Match ([^$(NEWLINE)]*) : [ Shell "xcode-select --print-path" ] ] ;
					isysroot = $(developerRoot)/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS7.1.sdk ;
					sdkroot = iphoneos7.1 ;

				case * :		Exit "* MacOSX_SDK: Unsupported version $(SDK_VERSION) for SDK platform $(SDK_PLATFORM)." ;
			}
			flags += -arch armv7 ; 
			flags += -fvisibility=hidden ;
	}

	C.AR on $(C.COMPILER_SUITE_SYMBOL) = $(COMPILER_BIN_PATH)/$(C.AR:BSZ=$(C.COMPILER_SUITE_SYMBOL)) ;
	C.CC on $(C.COMPILER_SUITE_SYMBOL) = $(COMPILER_BIN_PATH)/$(C.CC:BSZ=$(C.COMPILER_SUITE_SYMBOL)) ;
	C.C++ on $(C.COMPILER_SUITE_SYMBOL) = $(COMPILER_BIN_PATH)/$(C.C++:BSZ=$(C.COMPILER_SUITE_SYMBOL)) ;
	C.LINK on $(C.COMPILER_SUITE_SYMBOL) = $(COMPILER_BIN_PATH)/$(C.LINK:BSZ=$(C.COMPILER_SUITE_SYMBOL)) ;
	C.RANLIB on $(C.COMPILER_SUITE_SYMBOL) = ;

	ISYSROOT on $(C.ACTIVE_TOOLCHAIN_*) = $(isysroot) ;	
	IPHONEOS_SDK_VERSION on $(C.ACTIVE_TOOLCHAIN_*) = $(SDK_VERSION) ;
	IOS_SDK_VERSION_MIN on $(C.ACTIVE_TOOLCHAIN_*) = $(SDK_VERSION) ;
	XCODE_SDKROOT on $(C.ACTIVE_TOOLCHAIN_*) = $(sdkroot) ;

	flags += -gdwarf-2 ;

	C.Flags * : CC	: -isysroot $(isysroot) $(flags) ;
	C.Flags * : C++	: -isysroot $(isysroot) $(flags) ;
	C.Flags * : M	: -isysroot $(isysroot) $(flags) -fobjc-abi-version=2 -fobjc-legacy-dispatch  ;
	C.Flags * : MM	: -isysroot $(isysroot) $(flags) -fobjc-abi-version=2 -fobjc-legacy-dispatch ; 
	C.LibFlags * : -syslibroot $(isysroot) ;
	C.LinkFlags * : -isysroot $(isysroot) $(flags) ;

	if $(TARGETINFO_LOCATE) {
		Contents += "Projects[ [[C.*]] ].XCODE_SDKROOT[ [[$(PLATFORM)]] ][ [[$(CONFIG)]] ] = [[$(sdkroot)]]

" ;
	}
}


rule C.MinimumOSVersion TARGET : SDK_VERSION_MIN {
	TARGET = [ ActiveTarget $(TARGET) ] ;

	local SDK_PLATFORM ;
	SDK_PLATFORM ?= $(PLATFORM) ;

	if $(SDK_PLATFORM) in macosx32 macosx64 {
		SDK_PLATFORM = macosx ;
	}

	local flags ;
	switch $(SDK_PLATFORM) {
		case macosx :
			# 10.4, 10.5, 10.6, 10.7, 10.8 10.9
			flags += -mmacosx-version-min=$(SDK_VERSION_MIN) ;

		case iphone :
			# 4.3, 5.0, 5.1, 6.0 6.1 7.0
			flags += -miphoneos-version-min=$(SDK_VERSION_MIN) ;

		case iphonesimulator :
			# 4.3, 5.0, 5.1, 6.0 6.1 7.0
			flags += -mios-simulator-version-min=$(SDK_VERSION_MIN) ;

		case ipadsimulator :
			# 4.3, 5.0, 5.1, 6.0 6.1 7.0
			flags += -mios-simulator-version-min=$(SDK_VERSION_MIN) ;

		case ipad :
			# 4.3, 5.0, 5.1, 6.0 6.1 7.0
			flags += -miphoneos-version-min=$(SDK_VERSION_MIN) ;
	}

	C.Flags $(TARGET) : CC	: $(flags) ;
	C.Flags $(TARGET) : C++	: $(flags) ;
	C.Flags $(TARGET) : M	: $(flags) ;
	C.Flags $(TARGET) : MM	: $(flags) ;
	C.LinkFlags $(TARGET) : $(flags) ;

	IOS_SDK_VERSION_MIN on $(C.ACTIVE_TOOLCHAIN_TARGET) = $(SDK_VERSION_MIN) ;

	if $(TARGETINFO_LOCATE) {
		if $(SDK_PLATFORM) in iphone iphonesimulator ipad ipadsimulator {
			Contents += "Projects[ [[C.*]] ].IOS_SDK_VERSION_MIN[ [[$(PLATFORM)]] ][ [[$(CONFIG)]] ] = [[$(SDK_VERSION_MIN)]]

" ;
		} else if $(SDK_PLATFORM) in macosx {
			Contents += "Projects[ [[C.*]] ].OSX_SDK_VERSION_MIN[ [[$(PLATFORM)]] ][ [[$(CONFIG)]] ] = [[$(SDK_VERSION_MIN)]]

" ;
		}
	}
}


rule C._BundleInfoArray KEY : VALUE {
	INFO_PLIST on $(C.ACTIVE_TOOLCHAIN_TARGET) += "$(TAB)<key>$(KEY)</key>$(NEWLINE)$(TAB)<array>$(NEWLINE)" ;
	for value in $(VALUE) {
		INFO_PLIST on $(C.ACTIVE_TOOLCHAIN_TARGET) += "$(TAB)$(TAB)<string>$(value)</string>$(NEWLINE)" ;
	}
	INFO_PLIST on $(C.ACTIVE_TOOLCHAIN_TARGET) += "$(TAB)</array>$(NEWLINE)" ;
}


rule C._BundleInfoBoolean KEY : VALUE {
	INFO_PLIST on $(C.ACTIVE_TOOLCHAIN_TARGET) += "$(TAB)<key>$(KEY)</key>$(NEWLINE)$(TAB)" ;
	if $(VALUE) = true {
		INFO_PLIST on $(C.ACTIVE_TOOLCHAIN_TARGET) += "<true/>$(NEWLINE)" ;
	} else {
		INFO_PLIST on $(C.ACTIVE_TOOLCHAIN_TARGET) += "<false/>$(NEWLINE)" ;
	}
}


rule C._BundleInfoString KEY : VALUE {
	INFO_PLIST on $(C.ACTIVE_TOOLCHAIN_TARGET) += "$(TAB)<key>$(KEY)</key>$(NEWLINE)$(TAB)<string>$(VALUE)</string>$(NEWLINE)" ;
}


rule C.BundleInfo TARGET : TYPE : VALUE {
	TARGET = [ ActiveTarget $(TARGET) ] ;
	on $(C.ACTIVE_TOOLCHAIN_TARGET) if ! $(INFO_PLIST) {
		INFO_PLIST on $(C.ACTIVE_TOOLCHAIN_TARGET) ?= "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">
<plist version=\"1.0\">
<dict>
" ;

		C._BundleInfoString CFBundleDevelopmentRegion : en ;
		C._BundleInfoString CFBundleExecutable : [ C._retrieveOutputName $(TARGET) ] ;
		C._BundleInfoString CFBundleInfoDictionaryVersion : 6.0 ;
		C._BundleInfoString CFBundlePackageType : APPL ;
		C._BundleInfoString CFBundleSignature : ???? ;
		C._BundleInfoString CFBundleResourceSpecification : ResourceRules.plist ;

		switch $(PLATFORM) {
			case macosx32 :			VALUE = "" ;
			case macosx64 :			VALUE = "" ;
			case iphone :
				C._BundleInfoBoolean LSRequiresIPhoneOS : true ;
				C._BundleInfoArray UIDeviceFamily : 1 ;
				C._BundleInfoString DTPlatformName : iphoneos ;
				C._BundleInfoString DTSDKName : iphoneos$(IPHONEOS_SDK_VERSION) ;
				C._BundleInfoArray CFBundleSupportedPlatforms : iPhoneOS ;
				C._BundleInfoString MinimumOSVersion : $(IOS_SDK_VERSION_MIN) ;

			case iphonesimulator :
				C._BundleInfoBoolean LSRequiresIPhoneOS : true ;
				C._BundleInfoArray UIDeviceFamily : 1 ;
				C._BundleInfoString DTPlatformName : iphonesimulator ;
				C._BundleInfoString DTSDKName : iphonesimulator$(IPHONEOS_SDK_VERSION) ;
				C._BundleInfoArray CFBundleSupportedPlatforms : iPhoneSimulator ;
				C._BundleInfoString MinimumOSVersion : $(IOS_SDK_VERSION_MIN) ;

			case ipad :
				C._BundleInfoBoolean LSRequiresIPhoneOS : true ;
				C._BundleInfoArray UIDeviceFamily : 2 ;
				C._BundleInfoString DTPlatformName : iphoneos ;
				C._BundleInfoString DTSDKName : iphoneos$(IPHONEOS_SDK_VERSION) ;
				C._BundleInfoArray CFBundleSupportedPlatforms : iPhoneOS ;
				C._BundleInfoString MinimumOSVersion : $(IOS_SDK_VERSION_MIN) ;

			case ipadsimulator :
				C._BundleInfoBoolean LSRequiresIPhoneOS : true ;
				C._BundleInfoArray UIDeviceFamily : 2 ;
				C._BundleInfoString DTPlatformName : iphonesimulator ;
				C._BundleInfoString DTSDKName : iphonesimulator$(IPHONEOS_SDK_VERSION) ;
				C._BundleInfoArray CFBundleSupportedPlatforms : iPhoneSimulator ;
				C._BundleInfoString MinimumOSVersion : $(IOS_SDK_VERSION_MIN) ;
		}
	}

	switch $(TYPE:L) {
		case info :					C._BundleInfoString CFBundleGetInfoString : $(VALUE) ;
		case iconfile :				C._BundleInfoString CFBundleIconFile : $(VALUE) ;
		case iconfiles :			C._BundleInfoArray CFBundleIconFiles : $(VALUE) ;
		case longversion :			C._BundleInfoString CFBundleLongVersionString : $(VALUE) ;
		case bundlename :
			C._BundleInfoString CFBundleName : $(VALUE) ;
			CFBundleName on $(C.ACTIVE_TOOLCHAIN_TARGET) = $(VALUE) ;
		case displayname :
			C._BundleInfoString CFBundleDisplayName : $(VALUE) ;
			CFBundleDisplayName on $(C.ACTIVE_TOOLCHAIN_TARGET) = $(VALUE) ;
		case executable :			C._BundleInfoString CFBundleExecutable : $(VALUE) ;
		case identifier :
			C._BundleInfoString CFBundleIdentifier : $(VALUE[1]) ;
			CFBundleIdentifier on $(C.ACTIVE_TOOLCHAIN_TARGET) = $(VALUE[1]) ;
			AppIdentifierPrefix on $(C.ACTIVE_TOOLCHAIN_TARGET) = $(VALUE[2]) ;
		case shortversion :			C._BundleInfoString CFShortVersionString : $(VALUE) ;
		case bundleversion :
			C._BundleInfoString CFBundleVersion : $(VALUE) ;
			CFBundleVersion = $(VALUE) ;
		case copyright :			C._BundleInfoString NSHumanReadableCopyright : $(VALUE) ;
		case mainnibfile :			C._BundleInfoString NSMainNibFile : $(VALUE) ;
		case resourcespec :			C._BundleInfoString CFBundleResourceSpecification : $(VALUE) ;
		case supportedplatforms :   C._BundleInfoArray CFBundleSupportedPlatforms : $(VALUE) ;
		case minimumosversion :		C._BundleInfoString MinimumOSVersion : $(VALUE) ;
		case uidevicefamily :		C._BundleInfoArray UIDeviceFamily : $(VALUE) ;
		case uiprerenderedicon :	C._BundleInfoBoolean UIPrerenderedIcon : $(VALUE) ;
		case uistatusbarhidden :	C._BundleInfoBoolean UIStatusBarHidden : $(VALUE) ;
		case uiviewcontrollerbasedstatusbarappearance : C._BundleInfoBoolean UIViewControllerBasedStatusBarAppearance : $(VALUE) ;
		case uiinterfaceorientation :	
			if $(VALUE) = portrait {
				C._BundleInfoString UIInterfaceOrientation : UIInterfaceOrientationPortrait ;
			}
			if $(VALUE) = portraitupsidedown {
				C._BundleInfoString UIInterfaceOrientation : UIInterfaceOrientationPortraitUpsideDown ;
			}
			if $(VALUE) = landscapeleft {
				C._BundleInfoString UIInterfaceOrientation : UIInterfaceOrientationLandscapeLeft ;
			}
			if $(VALUE) = landscaperight {
				C._BundleInfoString UIInterfaceOrientation : UIInterfaceOrientationLandscapeRight ;
			}
		case uisupportedinterfaceorientations :
			local values = ;
			if portrait in $(VALUE) {
				values += UIInterfaceOrientationPortrait ;
			}
			if portraitupsidedown in $(VALUE) {
				values += UIInterfaceOrientationPortraitUpsideDown ;
			}
			if landscapeleft in $(VALUE) {
				values += UIInterfaceOrientationLandscapeLeft ;
			}
			if landscaperight in $(VALUE) {
				values += UIInterfaceOrientationLandscapeRight ;
			}
			C._BundleInfoArray UISupportedInterfaceOrientations : $(values) ;
	}
}


rule C.macosx._ApplicationFromObjects_LinkFlags {
	if bundle in $(OPTIONS) {
		local outputName = [ C._retrieveOutputName ] ;
		local bundlePath = $(outputPath)/$(outputName).app ;
		BUNDLE_PATH on $(C.ACTIVE_TOOLCHAIN_TARGET) = $(bundlePath) ;

		if $(PLATFORM) in macosx32 macosx64 {
			MakeLocate $(_linkTargets) : $(bundlePath)/Contents/MacOS ;
		} else {
			MakeLocate $(_linkTargets) : $(bundlePath) ;
		}

		local bundleTarget = $(C.ACTIVE_TOOLCHAIN_TARGET_GRIST):bundle ;
		local colon = ":" ;
		local cleanBundleTarget = @(clean$(colon)$(TARGET)$(colon)bundle:G=$(C.ACTIVE_TOOLCHAIN)) ;
		BUNDLE_TARGET on $(C.ACTIVE_TOOLCHAIN_TARGET) = $(bundleTarget) ;
		CLEAN_BUNDLE_TARGET on $(C.ACTIVE_TOOLCHAIN_TARGET) = $(cleanBundleTarget) ;
		Depends $(C.ACTIVE_TOOLCHAIN_TARGET) : $(bundleTarget) ;
		NotFile $(bundleTarget) ;
		Depends $(C.ACTIVE_TOOLCHAIN_CLEAN_TARGET) : $(cleanBundleTarget) ;
		NotFile $(cleanBundleTarget) ;
		Always $(cleanBundleTarget) ;
	}
}


actions C._GenerateDSYMFile {
	$(COMPILER_BIN_PATH)/dsymutil $(2:C) -o $(OUTPUT_PATH:C)
}


rule C.GenerateDSYMFile TARGET {
	TARGET = [ ActiveTarget $(TARGET) ] ;
	local bundlePath = $(BUNDLE_PATH:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
	local dsymBundlePath = $(bundlePath).dSYM ;
	local _t.dsym = $(_t).DSYM ;
	DSYM_NAME on $(C.ACTIVE_TOOLCHAIN_TARGET) = $(_t.dsym) ;
	BINDING on $(_t.dsym) = $(BINDING:Z=$(_t)) ;
	OUTPUT_PATH on $(_t.dsym) = $(dsymBundlePath) ;
	MakeLocate $(_t.dsym) : $(dsymBundlePath)/Contents/Resources/DWARF ;
	Depends $(C.ACTIVE_TOOLCHAIN_TARGET) : $(_t.dsym) : $(_t) ;
	CleanTree $(CLEAN_BUNDLE_TARGET:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) : $(dsymBundlePath) ;
	C._GenerateDSYMFile $(_t.dsym) : $(_t) : $(C.COMPILER_SUITE_SYMBOL) ;
}


actions CpResource
{
	ditto $(2) $(1:D)
}

C.__DOLLAR = \\$ ;

actions ProcessEntitlements
{
	plutil -convert xml1 -o $(1) $(2)
	sed -i "" -e "s/$(C.__DOLLAR)(CFBundleIdentifier)/$(CFBundleIdentifier:E=*needs-CFBundleIdenfier*)/g" -e "s/$(C.__DOLLAR)(AppIdentifierPrefix)/$(AppIdentifierPrefix:E=*needs-AppIdentifierPrefix*)./g" -e "s/<key>keychain-access-groups/$(GET_TASK_ALLOW:E="")<key>keychain-access-groups/g" $(1)
}
	#plutil -convert binary1 $(1)

rule C.macosx._ApplicationFromObjects_PostBuild {
	if bundle in $(OPTIONS) {
		local bundlePath = $(BUNDLE_PATH:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
		if $(PLATFORM) in macosx32 macosx64 {
			bundlePath = $(bundlePath)/Contents ;
		}
		local bundleTarget = $(BUNDLE_TARGET:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
		local cleanBundleTarget = $(CLEAN_BUNDLE_TARGET:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
		local isysroot = $(ISYSROOT:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
		isysroot ?= $(ISYSROOT:Z=$(C.ACTIVE_TOOLCHAIN_*)) ;

		# Get task allow value - trying target first, if not set falling back to configuration, if not set defaulting to true.
		local getTaskAllowValue = $(GET_TASK_ALLOW:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
		getTaskAllowValue ?= $(GET_TASK_ALLOW:Z=$(C.ACTIVE_TOOLCHAIN_*)) ;
		getTaskAllowValue ?= true ;

		local pkginfo = @(PkgInfo:G=$(C.ACTIVE_TOOLCHAIN_TARGET_GRIST)) ;
		MakeLocate $(pkginfo) : $(bundlePath) ;
		local contents = APPL???? ;
		CONTENTS on $(pkginfo) = $(contents) ;
		WriteFile $(pkginfo) ;
		UseCommandLine $(pkginfo) : $(contents) ;
		Depends $(bundleTarget) : $(pkginfo) ;
		Clean $(cleanBundleTarget) : $(pkginfo) ;

		local infoplistcontents = $(INFO_PLIST:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
		if $(infoplistcontents) {
			infoplistcontents += "</dict>
</plist>
" ;
			infoplistcontents = $(infoplistcontents:J="") ;

			local infoplist = @(Info.plist:G=$(C.ACTIVE_TOOLCHAIN_TARGET_GRIST)) ;
			MakeLocate $(infoplist) : $(bundlePath) ;
			CONTENTS on $(infoplist) = $(infoplistcontents) ;
			WriteFile $(infoplist) ;
			
			UseCommandLine $(infoplist) : $(infoplistcontents) ;
			Depends $(bundleTarget) : $(infoplist) ;
			Clean $(cleanBundleTarget) : $(infoplist) ;
		}
	
		if $(PLATFORM) in ipad iphone {	
			# Copy ResourceRules.plist.
			local sourceResourceRulesPlist = @(ResourceRules.plist:G=$(C.ACTIVE_TOOLCHAIN_TARGET_GRIST)|source) ;
			SEARCH on $(sourceResourceRulesPlist) = $(isysroot) ;
			local destResourceRulesPlist = @(ResourceRules.plist:G=$(C.ACTIVE_TOOLCHAIN_TARGET_GRIST)) ;
			MakeLocate $(destResourceRulesPlist) : $(bundlePath) ;

			Depends $(bundleTarget) : $(destResourceRulesPlist) : $(sourceResourceRulesPlist) ;	
			Clean $(cleanBundleTarget) : $(destResourceRulesPlist) ;
			CpResource $(destResourceRulesPlist) : $(sourceResourceRulesPlist) ;

			# Create Entitlements.plist.
			local sourceEntitlementsPlist = @(Entitlements.plist:G=$(C.ACTIVE_TOOLCHAIN_TARGET_GRIST)|source) ;
			SEARCH on $(sourceEntitlementsPlist) = $(isysroot) ;
			local destEntitlementsPlist = @(Entitlements.plist:G=$(C.ACTIVE_TOOLCHAIN_TARGET_GRIST)) ;
			MakeLocate $(destEntitlementsPlist) : $(LOCATE_TARGET) ;
			ENTITLEMENTS on $(C.ACTIVE_TOOLCHAIN_TARGET) = $(destEntitlementsPlist) ;
			Depends $(bundleTarget) : $(destEntitlementsPlist) : $(sourceEntitlementsPlist) ;
			local getTaskAllow = "<key>get-task-allow<\\/key><$(getTaskAllowValue)\\/>" ;
			GET_TASK_ALLOW on $(destEntitlementsPlist) = $(getTaskAllow) ;
			on $(C.ACTIVE_TOOLCHAIN_TARGET) UseCommandLine $(destEntitlementsPlist) : $(CFBundleIdentifier) $(AppIdentifierPrefix) $(getTaskAllow) ;
			Clean $(cleanBundleTarget) : $(destEntitlementsPlist) ;
			ProcessEntitlements $(destEntitlementsPlist) : $(sourceEntitlementsPlist) : $(C.ACTIVE_TOOLCHAIN_TARGET) ;
		}
	}
	
	if $(PLATFORM) in ipad ipadsimulator iphone iphonesimulator {
		C.GenerateDSYMFile $(TARGET) ;
	}
}


rule C.macosx._SharedLibraryFromObjects_LinkFlags {
	if module in $(OPTIONS) {
		linkFlags += -bundle -undefined dynamic_lookup -fPIC ;
	} else {
		local installName =
			$(INSTALL_NAME_PATH:Z=$(C.ACTIVE_TOOLCHAIN_TARGET))
			$(INSTALL_NAME_PATH:Z=$(C.ACTIVE_TOOLCHAIN_*))
		;
		if ! $(installName) {
			installName = $(_t:TD) ;
		} else {
			installName = $(installName[1]) ;
		}
		local outputName = [ C._retrieveOutputName : $(_t:S) ] ;
		installName = $(outputName:BSR=$(installName)) ;
		linkFlags += -dynamiclib -fPIC -install_name $(installName) ;
	}
}


rule C.SetTaskAllow TARGET : VALUE {
	TARGET = [ ActiveTarget $(TARGET) ] ;

	# If true/false isn't specific, assume true, as 'setting' could be thought of enabling.
	VALUE ?= true ;

	# Save value passed, we'll later check both $(TARGET) and C.* so we can have config defaults and support overrides.
	GET_TASK_ALLOW on $(C.ACTIVE_TOOLCHAIN_TARGET) = $(VALUE) ;
}


if $(TARGETINFO_LOCATE) {

rule XIB {

}

rule C.SetTaskAllow {
}

rule C.CodeSign TARGET : PROVISIONING_PROFILE {
	Contents += "Projects[ [[C.*]] ].IOS_SIGNING_IDENTITY[ [[$(PLATFORM)]] ][ [[$(CONFIG)]] ] = [[$(PROVISIONING_PROFILE)]]

" ;
}


rule C._ApplicationTargetInfo {
	if $(PLATFORM) in ipad iphone {
		local isysroot $(ISYSROOT:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
		isysroot ?= $(ISYSROOT:Z=$(C.ACTIVE_TOOLCHAIN_*)) ;
		
		# Create Entitlements.plist.
		local sourceEntitlementsPlist = @(Entitlements.plist:G=$(C.ACTIVE_TOOLCHAIN_TARGET_GRIST)|source) ;
		SEARCH on $(sourceEntitlementsPlist) = $(isysroot) ;
		local destEntitlementsPlist = @(Entitlements.plist:G=$(C.ACTIVE_TOOLCHAIN_TARGET_GRIST)) ;
		MakeLocate $(destEntitlementsPlist) : $(LOCATE_TARGET) ;
		Depends all : $(destEntitlementsPlist) : $(sourceEntitlementsPlist) ;
		on $(C.ACTIVE_TOOLCHAIN_TARGET) UseCommandLine $(destEntitlementsPlist) : $(CFBundleIdentifier) $(AppIdentifierPrefix) ;
		ProcessEntitlements $(destEntitlementsPlist) : $(sourceEntitlementsPlist) : $(C.ACTIVE_TOOLCHAIN_TARGET) ;

		Contents += "Projects[ [[$(TARGET)]] ].XCODE_ENTITLEMENTS[ [[$(PLATFORM)]] ][ [[$(CONFIG)]] ] = [[$(destEntitlementsPlist:T)]]

" ;
	}
}

} else {

rule XIB PARENT : SOURCES  {
	PARENT = [ ActiveTarget $(PARENT) ] ;
	
	local bundlePath = $(BUNDLE_PATH:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
	if ! $(bundlePath)
	{
		Echo *** XIB $(PARENT) \: $(SOURCES) ;
		Exit *** Bundle path not setup for target $(TARGET) ;
	}


	SOURCES = $(SOURCES:G=$(C.ACTIVE_TOOLCHAIN_TARGET_GRIST)) ;
	SEARCH on $(SOURCES) = $(SEARCH_SOURCE) ;
	
	local targets = $(SOURCES:S=.nib) ;
	
	MakeLocate $(targets) : $(bundlePath) ;
	Clean $(C.ACTIVE_TOOLCHAIN_CLEAN_TARGET) : $(targets) ;	
	
	Depends $(C.ACTIVE_TOOLCHAIN_TARGET) : $(targets) ;

	local source ;
	for source in $(SOURCES) {
		local target = $(source:S=.nib) ;
		Depends $(target) : $(source) ;
	
		CompileXIB $(target) : $(source) : $(C.COMPILER_SUITE_SYMBOL) ;
	}
}


	#/Developer/usr/bin/ibtool --errors --warnings --notices --output-format human-readable-text --compile $(1:C) $(2:C)
actions CompileXIB
{
	PATH=$(MACOSX_SDK_DEVELOPER_ROOT)/usr/bin:$PATH
	/Applications/Xcode.app/Contents/Developer/usr/bin/ibtool --errors --warnings --notices --output-format human-readable-text --compile $(1:C) $(2:C)
}


rule C.Provision TARGET : PROFILE_ID {
	TARGET = [ ActiveTarget $(TARGET) ] ;
	local _matchingProvision ;

	# See if provided provision is a filename that exists.
	local _profileDir = $(PROFILE_ID:P/) ;
	local _profileFilename = [ C.GristFiles : $(PROFILE_ID:BS/) ] ;
	
	if $(_profileDir) && $(_profileDir) != "" && $(_profileFilename) && $(_profileFilename) != ""
	{
		SEARCH on $(_profileFilename) = $(_profileDir) ;
		if $(_profileFilename:TC/) != $(PROFILE_ID:BSTC/)
		{
			_matchingProvision = $(_profileFilename) ;
		}
	}

	if ! $(_matchingProvision)
	{
		# Find profile from GUID.
		local _profileDirectory = "$(HOME)/Library/MobileDevice/Provisioning Profiles" ;

		# Open each profile and search for : "<string>$(PROFILE_ID)</string>"
		local _mobileProvisions = [ Glob $(_profileDirectory) : *.mobileprovision ] ;

		local _mobileProvision ;
		for _mobileProvision in $(_mobileProvisions) {
			local _cmd = "cat \"$(_mobileProvision)\" | grep \"<string>$(PROFILE_ID)</string>\"" ;
			local result = [ Shell $(_cmd) ] ;
			if $(result) != "" {
				_matchingProvision = $(_mobileProvision) ;
				break ;
			}
		}
	}

	if ! $(_matchingProvision) {
		Exit *** No mobile provisions found that match PROFILE_ID \: $(PROFILE_ID) ;
	}

	# Get bundle path.
	local _bundlePath ;
	local _bundlePath = $(BUNDLE_PATH:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
	local _bundleTarget = $(BUNDLE_TARGET:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;

	if ! $(_bundlePath) {
		Echo *** C.Provision $(TARGET) \: $(PROFILE_ID) ;
		Exit *** Bundle path not setup for target $(TARGET) ;
	}
	if ! $(_bundleTarget) {
		Echo *** C.Provision $(TARGET) \: $(PROFILE_ID) ;
		Exit *** Bundle target not setup for target $(TARGET) ;
	}

	local _dstProvision = [ C.GristFiles : embedded.mobileprovision ] ;
	MakeLocate $(_dstProvision) : $(_bundlePath) ;

	# Copy provision into the bundle and name it embedded.mobileprovision
	IncludeModule copyfile ;
	CopyFile $(TARGET) : $(_dstProvision) : $(_matchingProvision) ;
	Depends $(_bundleTarget) : $(_dstProvision) ;

	# Without this, if we change between profiles, the copy will not always
	# work due to destination time stamp being newer than source (despite
	# coming from a different file).
	UseCommandLine $(_dstProvision) : $(_matchingProvision) ;
}


actions C._CodeSign
{
	export CODESIGN_ALLOCATE=$(COMPILER_BIN_PATH)/codesign_allocate
	/usr/bin/codesign --force --sign "$(PROVISIONING_PROFILE)" --resource-rules="$(BUNDLE_PATH)/ResourceRules.plist" --entitlements $(ENTITLEMENTS:CT) $(BUNDLE_PATH)
	touch $(1:C)
	touch $(DSYM_NAME:CT)
}


rule C.CodeSign TARGET : PROVISIONING_PROFILE {
	ActiveTarget $(TARGET) ;

	if $(PLATFORM) in ipad iphone {
		local bundlePath = $(BUNDLE_PATH:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
		local bundleTarget = $(BUNDLE_TARGET:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
		local cleanBundleTarget = $(CLEAN_BUNDLE_TARGET:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
		local linkTarget = $(LINK_TARGET:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
		local entitlements = $(ENTITLEMENTS:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;

		local codeResources = [ C.GristFiles : CodeResources ] ;
		MakeLocate $(codeResources) : $(bundlePath)/_CodeSignature ;

		local codeResourcesSymbolicLink = [ C.GristFiles : CodeResourcesLink ] ;
		BINDING on $(codeResourcesSymbolicLink) = CodeResources ;
		MakeLocate $(codeResourcesSymbolicLink) : $(bundlePath) ;

		BUNDLE_PATH on $(codeResources) = $(bundlePath) ;
		ENTITLEMENTS on $(codeResources) = $(entitlements) ;
		PROVISIONING_PROFILE on $(codeResources) = $(PROVISIONING_PROFILE) ;

		local dependsList = [ DependsList $(bundleTarget) ] $(linkTarget) ;
		DSYM_NAME on $(codeResources) = $(DSYM_NAME:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
		C._CodeSign $(codeResources) : $(dependsList) : $(C.COMPILER_SUITE_SYMBOL) ;

		UseCommandLine $(codeResources) : $(dependsList) ;
		Depends $(bundleTarget) : $(codeResources) : $(dependsList) ;
		Clean $(cleanBundleTarget) : $(codeResources) $(codeResourcesSymbolicLink) ;
	}
}


rule C.BundleArchive TARGET : PROVISIONING_PROFILE : OUTPUT_PATH : URL {
	# Set up the archive support.
	if $(PLATFORM) in ipad iphone {
		TARGET = [ ActiveTarget $(TARGET) ] ;

		local bundlePath = $(BUNDLE_PATH:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
		local linkTarget = $(LINK_TARGET:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;

		local archiveTarget = archive:$(TARGET) ;
		NotFile $(archiveTarget) ;

		local ipaTarget = @($(bundlePath:D=:S=).ipa:G=$(C.ACTIVE_TOOLCHAIN_TARGET_GRIST)) ;
		MakeLocate $(ipaTarget) : $(OUTPUT_PATH) ;
		Depends $(archiveTarget) : $(ipaTarget) : $(linkTarget) ;
		Clean $(C.ACTIVE_TOOLCHAIN_CLEAN_TARGET) : $(ipaTarget) ;
		BUNDLE_PATH on $(ipaTarget) = $(bundlePath) ;
		PROVISIONING_PROFILE on $(ipaTarget) = $(PROVISIONING_PROFILE) ;
		C._BundleArchive $(ipaTarget) : $(linkTarget) : $(C.COMPILER_SUITE_SYMBOL) ;

		if $(URL) {
			# Stolen from BetaBuilder:

			# Write manifest.plist.
			local manifest.plist = @(manifest.plist:G=$(C.ACTIVE_TOOLCHAIN_TARGET_GRIST):archive) ;
			MakeLocate $(manifest.plist) : $(OUTPUT_PATH) ;
			Depends $(archiveTarget) : $(manifest.plist) ;
			Clean $(C.ACTIVE_TOOLCHAIN_CLEAN_TARGET) : $(manifest.plist) ;
			local contents ;
			on $(C.ACTIVE_TOOLCHAIN_TARGET) contents = "
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>items</key>
	<array>
		<dict>
			<key>assets</key>
			<array>
				<dict>
					<key>kind</key>
					<string>software-package</string>
					<key>url</key>
					<string>$(URL)/$(ipaTarget:D=:G=)</string>
				</dict>
			</array>
			<key>metadata</key>
			<dict>
				<key>bundle-identifier</key>
				<string>$(CFBundleIdentifier)</string>
				<key>bundle-version</key>
				<string>$(CFBundleVersion)</string>
				<key>kind</key>
				<string>software</string>
				<key>title</key>
				<string>$(CFBundleDisplayName)</string>
			</dict>
		</dict>
	</array>
</dict>
</plist>
" ;	
			CONTENTS on $(manifest.plist) = $(contents) ;
			WriteFile $(manifest.plist) ;
			UseCommandLine $(manifest.plist) : $(contents) ;

			local index.html = @(index.html:G=$(C.ACTIVE_TOOLCHAIN_TARGET_GRIST):archive) ;
			MakeLocate $(index.html) : $(OUTPUT_PATH) ;
			Depends $(archiveTarget) : $(index.html) ;
			Clean $(C.ACTIVE_TOOLCHAIN_CLEAN_TARGET) : $(index.html) ;
			local contents ;
			on $(C.ACTIVE_TOOLCHAIN_TARGET) contents = "
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
<title>$(CFBundleDisplayName)</title>
<style type="text/css">
body {background:#fff;margin:0;padding:0;font-family:arial,helvetica,sans-serif;text-align:center;padding:10px;color:#333;font-size:16px;}
#container {width:300px;margin:0 auto;}
h1 {margin:0;padding:0;font-size:14px;}
p {font-size:13px;}
.link {background:#ecf5ff;border-top:1px solid #fff;border:1px solid #dfebf8;margin-top:.5em;padding:.3em;}
.link a {text-decoration:none;font-size:15px;display:block;color:#069;}

</style>
</head>
<body>

<div id="container">

<h1>iOS 4.0 and 5.0 Users:</h1>

<div class="link"><a href="itms-services://?action=download-manifest&url=$(URL)/manifest.plist">Tap Here to Install<br />$(CFBundleDisplayName)<br />On Your Device</a></div>

<p><strong>Link didn't work?</strong><br />
Make sure you're visiting this page on your device, not your computer.</p>

</div>

</body>
</html>
" ;
			CONTENTS on $(index.html) = $(contents) ;
			WriteFile $(index.html) ;
			UseCommandLine $(index.html) : $(contents) ;

		}
	}
}

actions C._BundleArchive
{
	export CODESIGN_ALLOCATE=$(COMPILER_BIN_PATH)/codesign_allocate
	/usr/bin/xcrun -sdk iphoneos PackageApplication -v "$(BUNDLE_PATH)" -o "$(1)" --sign "$(PROVISIONING_PROFILE)" --embed "$(BUNDLE_PATH)/embedded.mobileprovision"
}


} # TARGETINFO_LOCATE

