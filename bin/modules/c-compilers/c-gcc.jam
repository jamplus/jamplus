{
	COMPILER.$(PLATFORM) = gcc ;

	SUFEXE	?= "" ;
	SUFLIB	?= .a ;
	SUFMODULE ?= .so ;
	SUFLINKLIBS ?= $(SUFLIB) $(SUFMODULE) ;
	SUFOBJ	?= .o ;
	SUFSHAREDLIB ?= .so ;

	C.Flags CC	: * : -x c ;
	C.Flags C++	: * : -x c++ ;
	C.Flags M	: * : -x objective-c ;
	C.Flags MM	: * : -x objective-c++ ;

	PCHCCFLAGS = -x c-header ;
	PCHC++FLAGS = -x c++-header ;
	PCHMFLAGS = -x objective-c-header ;
	PCHMMFLAGS = -x objective-c++-header ;

	NOARSCAN = true ;
	NOARUPDATE = true ;

	switch $(OS)
	{
		case CYGWIN :
			Defines * : __cygwin__ ;
			C.CC		?= gcc ;
			C.C++		?= g++ ;
			JAMSHELL	?= sh -c ;
			C.RANLIB	?= "" ;
			SUFEXE		= .exe ;
	}
}

if ! $(TARGETINFO_LOCATE) {

#
# General defaults; a lot like UNIX
#

BINDIR		?= /usr/local/bin ;
LIBDIR		?= /usr/local/lib ;
STDHDRS		?= /usr/include ;
UNDEFFLAG	?= "-u _" ;

rule C.FDefines { return -D$(<) ; }
rule C.FIncludes { return -I$(<) ; }
rule C.FLibraryPaths { return -L$(<) ; }


rule C._LinkPrebuiltLibraries
{
	local lib ;
	for lib in $(gristedLibraries) {
		if ! $(lib:D) {
   			BINDING on $(lib) = lib$(lib:B) ;
			EXPAND_TEXT on $(lib) = -l$(lib:G=) ;
			NoCare $(lib) ;
   		}
	}
}


actions updated together piecemeal C.Archive
{
	"$(C.AR)" $(LIBFLAGS) $(<:C) $(>:C)
}

actions C.Link
{
	"$(C.LINK)" -o $(<[1]:C) $(>:C) $(NEEDLIBS:TC) $(LINKLIBS:T) $(LINKFLAGS)
}

actions together C.Ranlib
{
	"$(C.RANLIB)" $(<:C)
}

#
# NOARUPDATE - can't update an archive
#

if $(NOARUPDATE)
{
	actions C.Archive
	{
	"$(C.AR)" $(LIBFLAGS) $(<:C) $(>:C)
	}
}

actions updated response C.CC
{
	"$(C.CC)" -c $(MFLAGS) $(>:C)
}

actions updated response C.C++
{
	"$(C.C++)" -c $(MFLAGS) $(>:C)
}

actions updated response C.PCH
{
	"$(C.C++)" -c $(MFLAGS) $(>:C)
}


rule C._C++Exceptions
{
	if ! $(TYPE)  ||  $(TYPE) = false
	{
		FLAGS_TO_ADD.$(THE_PLATFORM).$(THE_CONFIG) on $(TARGET) += -fno-exceptions ;
 		FLAGS_TO_ADD.$(THE_PLATFORM).$(THE_CONFIG) on $(TARGET) -= -fexceptions ;
	}
	else if $(TYPE) = true
	{
		FLAGS_TO_ADD.$(THE_PLATFORM).$(THE_CONFIG) on $(TARGET) += -fexceptions ;
		FLAGS_TO_ADD.$(THE_PLATFORM).$(THE_CONFIG) on $(TARGET) -= -fno-exceptions ;
	}
}


rule C._RuntimeTypeHelper
{
	if ! $(TYPE)  ||  $(TYPE) = dynamic
	{
	}
	else if $(TYPE) = static
	{
	}
}

rule C._MultiCppCompile_SetupFlags
{
	if $(_pch[1])  &&  ! $(_nopch) {
		_flags += -Winvalid-pch ;

		local md5 = [ MD5 $(_flags) ] ;
		local _pchName = @($(_pch[3]:LBS):G=$(grist)-$(md5)) ;
		BINDING on $(_pchName) = $(_pch[3]) ;
		local _pchFilename = $(_pchName).gch ;

		if ! $(built-$(_pchName)) {
			built-$(_pchName) = 1 ;

			local pchext = $(_pchName:S) ;
			local pchBUILD_EXT = C.BUILD$(pchext) ;

			MakeLocate $(_pchFilename) : $(LOCATE_TARGET)/$(_pchName:S=:G=)-$(md5) ;

			newsrcs += $(_pchName) ;

			PCHFLAGS.$(PLATFORM).$(CONFIG) on $(_pchFilename) += $($($(pchBUILD_EXT).PCHFLAGS)) ;
			MFLAGS on $(_pchName) = $($(pchBUILD_EXT).RULE) $($(pchBUILD_EXT).SUFOBJ) $($(pchBUILD_EXT).ADD_TO_LINK) $(_flags[5-]) $($($(BUILD_EXT).PCHFLAGS)) -o \"$(_pchFilename:T)\" ;

			Depends $(_pchFilename) : $(_pchName) ;
			SEARCH on $(_pchName) = $(_hdrs) ;

			# source needs to be scanned for header dependencies
			HDRRULE on $(_pchName) = C.HdrRule ;
			HDRSCAN on $(_pchName) = $(C.HDRPATTERN) ;
			HDRGRIST on $(_pchName) = $(grist) ;
			HDRSEARCH on $(_pchName) = $(_hdrs) ;
		}

		_flags += -include $(_pchFilename:T:S=:C) ;

		HDREXTRA on $(_src) += $(_pchName:T) ;

		# if the source should use pch
		if $(_pch[2]) {
			# mark that compilation will depend on it
			Includes $(_src) : $(_pchFilename) ;
		}

		if $(_pch[3]) {
			Depends $(_obj) : $(_pchFilename) ;
		}
	}

	if $(objectForceIncludes[1]) {
		SEARCH on $(objectForceIncludes) = $(_hdrs) ;
		_flags += "-include $(objectForceIncludes:G=)" ;
	}

	_flags += "-o \"$(_obj:T)\"" ;

	if $(C_LIBRARY_SHARED_MODULE) {
		_flags += -fPIC ;
	}
}

rule C._SharedLibraryFromObjects_ExportLib
{
#			BINDING on $(_tlib) = [ _retrieveOutputName $(TARGET) : SUFLIB ] ;
	BINDING on $(_tlib) = $(_t) ;
	MakeLocate $(_tlib) : $(outputPath) ;
	Depends $(TARGET) : $(_tlib) ;
	Depends $(_tlib) : $(_t) ;
	NotFile $(_tlib) ;		# Turn this off for export libraries.
	_linkTargets += $(_tlib) ;

#			LinkFlags $(TARGET) : -Wl,--out-implib,$(_tlib:T) ;
}

rule C._SharedLibraryFromObjects_LinkFlags
{
	if module in $(OPTIONS) {
		linkFlags += -shared -fPIC ;
	} else {
		on $(TARGET) linkFlags += -shared -fPIC ;
	}
}

} # TARGETINFO_LOCATE

C.BUILD_EXTENSIONS = $(SUFOBJ) ;
C.AddBuildExtensions CC : .c .s : C.CC : $(SUFOBJ) "" : 1 1 0 : 1 ;
C.AddBuildExtensions C++ : .cc .cpp .cxx : C.C++ : $(SUFOBJ) "" : 1 0 1 : 1 ;
C.AddBuildExtensions M : .m : C.CC : $(SUFOBJ) "" : 1 1 0 : 1 ;
C.AddBuildExtensions MM : .mm : C.C++ : $(SUFOBJ) "" : 1 0 1 : 1 ;
C.AddBuildExtensions PCH : .h .pch : C.PCH : "" .gch ;



