/*! \page jamtoworkspace Jam Workspace Generator

\section jamtoworkspace_overview Overview

This documentation is out of date.

JamPlus has a built-in workspace generator that reads a project's Jamfiles and exports an IDE workspace.  The workspace may then be loaded in the appropriate IDE and represents a read-only view of the contents of the Jamfiles.  Updates to the Jamfiles do not appear automatically in the IDE workspace, although correct Jam builds will continue to function.  JamPlus provides a facility to manually regenerate the workspace when Jamfiles change.

JamPlus generates a completely out-of-source build structure.  This means that all intermediate files, output files, IDE project files, and other miscellaneous Jam related files exist in a directory external to the source code itself.  Since the entire build tree is generated, merely removing the out-of-source build directory will destroy all evidence of the build.

Out of source build trees also contain special instructions to make the build run faster.  Among other things, the dependency cache is set up.  The dependency cache is used to track 'include' dependencies, but it is also used to store MD5 command lines and MD5 contents information.




\section jamtoworkspace_usage Usage

Generation of a new IDE workspace is performed by running the command line:

<pre>
    jam --workspace [options] <source-jamfile> <path-to-destination>
</pre>

Running <b>jam --workspace</b> without any command line options will list the help.

<pre>
jam --workspace
    [ -gen=<i>GENERATOR</i> ]
    [ -compiler=<i>COMPILER</i> ]
    [ -config=<i>CONFIG</i> ]
    [ -jamflags=<i>KEY=VALUE</i> ]
    [ -jambase=<i>JAMBASEFULLPATH</i> ]
    <i>source-jamfile</i>
    [ <i>path-to-destination</i> ]
</pre>

<b>jam --workspace</b> may be invoked with the following options:

<table width=85% align=center border=1 cellpadding=2>
  <tr>
    <td valign=top width=20%><code> -gen=<i>GENERATOR</i> </code>
	<td> Sets an IDE workspace and project generator.  <i>GENERATOR</i> may be one of the following:
	  <ul>
	    <li> \c codeblocks - Generates CodeBlocks workspaces and projects.
	    <li> \c none (default) - Do not generate a workspace.
		<li> \c vc6 - Generates Visual C++ 6.0 workspaces and projects.
		<li> \c vs2003 - Generates Visual Studio 2003 solutions and projects.
		<li> \c vs2005 - Generates Visual Studio 2005 solutions and projects.
		<li> \c vs2008 - Generates Visual Studio 2008 solutions and projects.
		<li> \c vs2010 - Generates Visual Studio 2010 solutions and projects.
		<li> \c xcode - Generates Xcode workspaces and projects.
	  </ul>

  <tr>
    <td valign=top width=20%><code> -compiler=<i>COMPILER</i> </code>
	<td> Sets the default compiler used to build with.  If not specified, the compiler will be set according to the Jambase auto detection capabilities, with Visual Studio taking precedence.

	  <i>COMPILER</i> may be one of the following:
	  <ul>
	    <li> \c vs2010 - Visual Studio 2010.
	    <li> \c vs2008 - Visual Studio 2008.
	    <li> \c vs2005 - Visual Studio 2005.
	    <li> \c vs2003 - Visual Studio 2003.
	    <li> \c vc6 - Visual C++ 6.
	    <li> \c mingw - MinGW.
	    <li> \c gcc - GCC.
	  </ul>

  <tr>
    <td valign=top width=20%><code> -config=<i>CONFIG</i> </code>
	<td> Provides various configuration options to Jam's workspace generator.  <i>CONFIG</i> is the name of the configuration file.

  <tr>
    <td valign=top width=20%><code> -jamflags=<i>KEY=VALUE</i> </code>
	<td> Provides additional configuration options when generating the out of source build's redirection Jambase.jam.  <i>KEY</i> is the name of a variable known to Jam, such as \c CSC_COMPILER.  <i>VALUE</i> is the value to set that Jam variable to.

	  <i>Examples:</i>

	  <ul>
	    <li> <tt>CSC_COMPILER=mono</tt> (or <tt>vs2005</tt> or <tt>vs2008</tt>)
      </ul>

  <tr>
    <td valign=top width=20%><code> -jambase=<i>JAMBASEFULLPATH</i> </code>
	<td> Overrides the default Jambase.jam that is automatically found near the executable with a user-provided version. \c JAMBASEFULLPATH must be the full path, filename included, of the alternate Jambase.jam.

<pre>
jam --workspace -jambase=c:/myapp/build/jam/NewJambase.jam ...
</pre>

  <tr>
    <td valign=top width=20%><code> source-jamfile </code>
	<td> The path to the Jamfile to start building the workspace from.  If only the directory is specified, then Jam attempts to load a file named <tt>Jamfile.jam</tt> from the given directory.  If <i>source-jamfile</i> is a directory with filename, such as <tt>../Game/Pong.jam</tt>, then the specified Jamfile is loaded.

  <tr>
    <td valign=top width=20%><code> path-to-destination </code>
	<td> (optional) If <i>path-to-destination</i> is specified, then the build tree will be generated into <i>path-to-destination</i>.  If <i>path-to-destination</i> is not specified, the build tree is generated into the current working directory.
</table>

Minimally, Jam requires the <tt>-gen</tt> parameter and <tt>source-jamfile</tt>.

Assuming a source tree of:

- <tt>helloworld/</tt>
  - <tt>Jamfile.jam</tt>
  - <tt>src/</tt>
    - <tt>helperlib/</tt>
	  - <tt>helper.cpp</tt>
	  - <tt>Jamfile.jam</tt>
    - <tt>main/</tt>
      - <tt>helloworld.cpp</tt>
	  - <tt>Jamfile.jam</tt>


Running JamToWorkspace from the <tt>helloworld/</tt> root with the following command line creates an out of source build directory in <tt>helloworld/build/</tt>.

\code
jam --workspace -gen=vs2008 Jamfile.jam build
\endcode

From here on out, all Jam executions should be run from within the generated build/ directory.





\section jamtoworkspace_generatedfiles Generated Files

- <tt>build/</tt>
  - <tt>_workspace.ide_/</tt>
    - <tt>_targetinfo_/</tt> - Information files dumped by Jam and used to construct the workspace.
    - <tt>DumpJamTargetInfo.jam</tt> - A helper redirect script used by <tt>updateworkspace.bat</tt>.
	- Other assorted files.
    - <tt>workspacename.sln/workspacename.xcodeproj/etc</tt> - The generated workspace file containing.
    - <tt>updateworkspace.bat</tt> - Used to update any workspace/project files based on changes to the Jamfiles.
  - <tt>temp-PLATFORM-CONFIG/</tt> - All intermediate and output files are built into this directory.  Files generated by the Jamfiles likely go into here, too.  The directory structure mirrors the source structure.
  - <tt>buildenvironment.config</tt> - A copy of the configuration passed in through <tt>-config</tt>.
  - <tt>customsettings.jam</tt> - Put your own Jam settings here.  The file is included before including the Jamfile at the root of your project.
  - <tt>jam.bat</tt> - A helper batch file containing the absolute path to the Jam executable that should be used for builds.
  - <tt>Jambase.jam</tt> - The Jam executable searches for a Jambase.jam, and when run from within the build/ directory, this Jambase.jam acts as a redirect to the real Jambase.jam sitting side by side with the \b Jam executable.  Before it redirects, it changes any necessary global settings, such as the default COMPILER, according to the <b>jam --workspace</b> command line.
  - <tt>Jamfile.jam</tt> - The first Jamfile read by Jam.  Contains necessary instructions for setting the intermediate/output location via \c ALL_LOCATE_TARGET, turning on of the dependency cache through \c DEPCACHE to speed builds, including the <tt>usersettings.jam</tt>, and SubInclude statements based on where the <i>source-jamfile</i> was specified and any additional SubIncludes from the <tt>.config</tt> file.
  - <tt>updatebuildenvironment.bat</tt> - Regenerates the out of source build root workspace according to settings stored within <tt>buildenvironment.config</tt>.  IDE projects are not updated through this script.  Use <tt>_workspace.vs2008_/updateworkspace.bat</tt> instead.

*/

