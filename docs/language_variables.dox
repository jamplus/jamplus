/*! \page language_variables Variables

\section language_variable_basics Basics

\b Jam variables are lists of zero or more elements, with each element being a string value.  An undefined variable is indistinguishable from a variable with an empty list, however, a defined variable may have one more elements which are null strings.  All variables are referenced as \$(<i>variable</i>).

Variables are either global or target-specific.  In the latter case, the variable takes on the given value only during the target's binding, header file scanning, and updating; and during the "on <i>target</i> <i>statement</I>" statement.

A variable is defined with:

<table align=center>
  <tr>
    <td><code><i>variable</i> = <i>elements</i> ;</code></td>
	<td>The = operator replaces any previous elements of \em variable with \em elements</td>
  </tr>
  <tr>
    <td><code><i>variable</i> += <i>elements</i> ;</code></td>
	<td>The += operator adds \em elements to <i>variable</i>'s list of elements</td>
  </tr>
  <tr>
    <td><code><i>variable</i> -= <i>elements</i> ;</code></td>
	<td>The -= operator removes \em elements from <i>variable</i>'s list of elements</td>
  </tr>
  <tr>
    <td><code><i>variable</i> ?= <i>elements</i> ;</code></td>
	<td>The ?= operator sets <i>variable</i> only if it was previously unset</td>
  </tr>
  <tr>
    <td><code><i>variable</i> on <i>targets</i> = <i>elements</i> ;</code></td>
	<td>The = operator replaces any previous elements of \em variable with \em elements directly on \em targets</td>
  </tr>
  <tr>
    <td><code><i>variable</i> on <i>targets</i> += <i>elements</i> ;</code></td>
	<td>The += operator directly adds \em elements to <i>targets</i>'s <i>variable</i>'s list of elements</td>
  </tr>
  <tr>
    <td><code><i>variable</i> on <i>targets</i> -= <i>elements</i> ;</code></td>
	<td>The -= operator directly removes \em elements from <i>targets</i>'s <i>variable</i>'s list of elements</td>
  </tr>
  <tr>
    <td><code><i>variable</i> on <i>targets</i> ?= <i>elements</i> ;</code></td>
	<td>The ?= operator sets <i>variable</i> on <i>targets</i> only if it was previously unset</td>
  </tr>
</table>

Variables referenced in updating commands will be replaced with their values; target-specific values take precedence over global values.  Variables passed as arguments (\$(1) and \$(2)) to actions are replaced with their bound values; the "bind" modifier can be used on actions to cause other variables to be replaced with bound values.  See <A HREF="#actionmods">Action Modifiers</A> above.

\b Jam variables are not re-exported to the environment of the shell that executes the updating actions, but the updating actions can reference \b Jam variables with \$(<i>variable</i>).

\code
    # If myvar hasn't been assigned yet, assign the string list ab and cd.
    myvar ?= ab cd ;

    # Replace myvar's contents with ef and gh.
    myvar = ef gh ;

    # Add some additional elements to myvar.
    myvar += ij kl ;        # myvar = ef gh ij kl

    # Remove some elements from myvar.
    myvar -= gh kl ;        # myvar = ef ij

    # sometarget.myvar = zx cv
    myvar on sometarget = zx cv ;

    # This prints zx cv.
    on sometarget Echo $(myvar) ;

    # This prints ef ij, because myvar doesn't exist on anothertarget, and so it
    # falls through to the global myvar.
    on anothertarget Echo $(myvar) ;
\endcode





\section language_variable_expansion Variable Expansion

During parsing, \b Jam performs variable expansion on each token that is not a keyword or rule name.  Such tokens with embedded variable references are replaced with zero or more tokens.  Variable references are of the form \$(<i>variable</i>) or \$(<i>variable:modifiers</i>), where \em variable is the variable name, and \em modifiers are optional modifiers.

A literal expansion is in the form \@(<i>literal</i>) or \@(<i>literal:modifiers</i>) or alternatively as \$\@(<i>literal</i>) or \$\@(<i>literal:modifiers</i>).  Instead of expanding a variable's contents, as with a \$(<i>variable</i>) expansion, the direct contents of <i>literal</i> are used.  All other behavior is the same.

Variable expansion in a rule's actions is similar to variable expansion in statements,  except that the action string is tokenized at whitespace regardless of quoting.

The result of a token after variable expansion is the \em product of the components of the token, where each component is a literal substring or a list substituting a variable reference.  For example:

<table width=75% align=center>
  <tr>
    <td><code>
	    <br>\$(X)      -> a b c
	    <br>t\$(X)     -> ta tb tc
	    <br>\$(X)z     -> az bz cz
	    <br>\$(X)-\$(X) -> a-a a-b a-c b-a b-b b-c c-a c-b c-c

	</code></td>
  </tr>
</table>

The variable name and modifiers can themselves contain a variable reference,  and this partakes of the product as well:

<table width=75% align=center>
  <tr>
    <td><code>
	    <br>\$(X)      -> a b c
	    <br>\$(Y)      -> 1 2
	    <br>\$(Z)      -> X Y
	    <br>\$(\$(Z))   -> a b c 1 2

	</code></td>
  </tr>
</table>

Because of this product expansion, if any variable reference in a token is undefined, the result of the expansion is an empty list.  If any variable element is a null string, the result propagates the non-null elements:

<table width=75% align=center>
  <tr>
    <td><code>
	    <br>\$(X)        -> a ""
	    <br>\$(Y)        -> "" 1
	    <br>\$(Z)        ->
	    <br>*\$(X)\$(Y)*  -> *a* *a1* ** *1*
	    <br>*\$(X)\$(Z)*  ->

	</code></td>
  </tr>
</table>

\anchor variable_expansion_c

A variable element's string value can be parsed into grist and filename-related components.  Modifiers to a variable are used to select elements, select components, and replace components.  Modifiers are applied in the order of the table below:

<table width=75% border=1 align=center>
  <tr>
    <td><code> [<i>n</i>] </code></td>
    <td>Select element number <i>n</i> (starting at 1).  If the variable contains fewer than <i>n</i> elements, the result is a zero-element list.</td>
  </tr>
  <tr>
    <td><code> [<i>n</i>-<i>m</i>] </code></td>
    <td>Select elements number <i>n</i> through <i>m</i>.</td>
  </tr>
  <tr>
    <td><code> [<i>n</i>-] </code></td>
	<td>Select elements number <i>n</i> through the last.</td>
  </tr>
  <tr>
    <td><code> :E=<i>value</i> </code></td>
	<td>Use <i>value</i> instead if the variable is unset.  Note that <tt>:E=</tt> by itself doesn't mean anything.</td>
  </tr>
  <tr>
    <td><code> :A </code></td>
	<td>Expand a variable expansion within a string.  When a string has been read from an external source and contains a variable in <tt>$(var)</tt> or <tt>\@(var)</tt> syntax, the <tt>:A</tt> modifier can be used to expand it as if it had been inline in the Jam script.</td>
  </tr>
  <tr>
    <td><code> :W[=<i>remove_path</i>] </code></td>
	<td>Populate the list with directory contents matching the string.  If specified, <i>remove_path</i> is removed from the beginning of each found file.</td>
  </tr>
  <tr>
    <td><code> :T </code></td>
	<td>Expand the bound name of the target.  Just as when expanding within an action, the BINDING is applied first.  If LOCATE is set, it is used for the path.  If not, SEARCH is used to look up the file.</td>
  </tr>
  <tr>
    <td><code> :C </code></td>
	<td>EsCapes the string as if it were a file path.  On Windows, if the path has spaces, it is quoted.  On other platforms, spaces, parentheses, and a few other special characters are escaped with a backslash.</td>
  </tr>
  <tr>
    <td><code> :B </code></td>
	<td>Select filename base.</td>
  </tr>
  <tr>
    <td><code> :B=<i>base</i> </code></td>
	<td>Replace the base part of file name with <i>base</i>.</td>
  </tr>
  <tr>
    <td><code> :S </code></td>
	<td>Select (last) filename suffix.</td>
  </tr>
  <tr>
    <td><code> :S=<i>suf</i> </code></td>
	<td>Replace the suffix of file name with <i>suf</i>.</td>
  </tr>
  <tr>
    <td><code> :M </code></td>
	<td>Select archive member name.</td>
  </tr>
  <tr>
    <td><code> :M=<i>mem</i> </code></td>
	<td>Replace the archive member name with <i>mem</i>.</td>
  </tr>
  <tr>
    <td><code> :D </code></td>
	<td>Select directory path.</td>
  </tr>
  <tr>
    <td><code> :D=<i>path</i> </code></td>
	<td>Replace directory with <i>path</i>.</td>
  </tr>
  <tr>
    <td><code> :P </code></td>
	<td>Select parent directory.  On VMS, \$(var:P) is the parent directory of \$(var:D); on Unix and NT, \$(var:P) and \$(var:D) are the same.</td>
  </tr>
  <tr>
    <td><code> :G </code></td>
	<td>Select grist.</td>
  </tr>
  <tr>
    <td><code> :G=<i>grist</i> </code></td>
	<td>Replace grist with <i>grist</i>.</td>
  </tr>
  <tr>
    <td><code> :R=<i>root</i> </code></td>
	<td>Prepend <i>root</i> to the whole file name,  if not already rooted.</td>
  </tr>
  <tr>
    <td><code> :U </code></td>
	<td>Replace lowercase characters with uppercase.</td>
  </tr>
  <tr>
    <td><code> :L </code></td>
	<td>Replace uppercase characters with lowercase.</td>
  </tr>
  <tr>
    <td><code> :/ </code></td>
	<td>Convert all backslashes (\\) to forward slashes (/).</td>
  </tr>
  <tr>
    <td><code> :\\\\ </code></td>
	<td>Convert all forward slashes (/) to backslashes (\\).</td>
  </tr>
  <tr>
    <td><code> :<i>chars</i> </code></td>
	<td>Select the components listed in <i>chars</i>.</td>
  </tr>
  <tr>
    <td><code> :J=<i>joinval</i> </code></td>
	<td>Concatenate list elements into single element, separated by <i>joinval</i>.</td>
  </tr>
  <tr>
    <td><code> :I=<i>regex</i> </code></td>
	<td>Include all list items matching <i>regex</i>.  Remove everything else.  More than one set of <tt>:I</tt> or <tt>:X</tt> modifiers may appear in a given expansion, and they are applied in order.</td>
  </tr>
  <tr>
    <td><code> :X=<i>regex</i> </code></td>
	<td>Exclude all list items matching <i>regex</i>.  Keep everything else.  More than one set of <tt>:I</tt> or <tt>:X</tt> modifiers may appear in a given expansion, and they are applied in order.</td>
  </tr>
</table>


\section patterns_and_wildcards Patterns and Wildcards

When using the <tt>:W</tt> modifier, the following file globbing syntax is available.

<table border="1" width="75%" align="center">
  <tr>

    <td width="150"><b>Wildcard</b></td>
    <td width="450"><b>Description</b></td>
  </tr>
  <tr>
    <td><code>?</code></td>
    <td>Matches any single character of the file name or directory name.</td>
  </tr>

  <tr>
    <td><code>*</code></td>
    <td>Matches 0 or more characters of the file name or directory name.</td>
  </tr>
  <tr>
    <td><code>/</code> at end of pattern</td>
    <td>Any pattern with a closing slash will start a directory search, instead of the default file search.</td>
  </tr>
  <tr>
    <td><code>**</code></td>
    <td>Search files recursively.</td>
  </tr>
  <tr>
    <td><code>\verbatim **/\endverbatim</code></td>
    <td>Search directories recursively.</td>
  </tr>
</table>

<p>Some examples follow:</p>

<table border="1" width="75%"  align="center">
  <tr>
    <td width="150"><b>Example Pattern</b></td>
    <td width="450"><b>Description</b></td>
  </tr>

  <tr>
    <td><code>File.txt</code></td>
    <td>Matches a file or directory called <i>File.txt</i>.</td>
  </tr>
  <tr>
    <td><code>File*.txt</code></td>

    <td>Matches any file or directory starting with File and ending with a .txt extension.</td>
  </tr>
  <tr>
    <td><code>File?.txt</code></td>
    <td>Matches any file or directory starting with File and containing one more character.</td>
  </tr>
  <tr>
    <td><code>F??e*.txt</code></td>
    <td>Matches a file or directory starting with F, followed by any two characters, followed by e, then any number of characters up to the extension .txt.</td>
  </tr>
  <tr>
    <td><code>File*</code></td>
    <td>Matches a file or directory starting with File and ending with or without an extension.</td>
  </tr>

  <tr>
    <td><code>*</code></td>
    <td>Matches all files (non-recursive).</td>
  </tr>
  <tr>
    <td><code>\verbatim */ \endverbatim</code></td>
    <td>Matches all directories (non-recursive).</td>

  </tr>
  <tr>
    <td><code>\verbatim A*/ \endverbatim</code></td>
    <td>Matches any directory starting with A (non-recursive).</td>
  </tr>
  <tr>
    <td><code>\verbatim **/* \endverbatim</code></td>

    <td>Matches all files (recursive).</td>
  </tr>
  <tr>
    <td><code>**</code></td>
    <td>Shortened form of above. Matches all files (recursive). Internally, expands to \verbatim **/*\endverbatim</td>
  </tr>
  <tr>

    <td><code>\verbatim **/ \endverbatim</code></td>
    <td>Matches all directories (recursive).</td>
  </tr>
  <tr>
    <td><code>**{filename chars}</code></td>
    <td>Matches {filename chars} recursively. Internally, expands to \verbatim **/*{filename chars}\endverbatim.</td>
  </tr>

  <tr>
    <td><code>{dirname chars}**</code></td>
    <td>Expands to \verbatim {dirname chars}*/**\endverbatim.</td>
  </tr>
  <tr>
    <td><code>{dirname chars}**{filename chars}</code></td>
    <td>Expands to \verbatim {dirname chars}*/**/*{filename chars}\endverbatim.</td>

  </tr>
  <tr>
    <td><code>**.h</code></td>
    <td>Matches all *.h files recursively. Expands to \verbatim **/*.h\endverbatim.</td>
  </tr>
  <tr>
    <td><code>**resource.h</code></td>

    <td>Matches all *resource.h files recursively.
    Expands to \verbatim **/*resource.h\endverbatim.</td>
  </tr>
  <tr>
    <td><code>BK**</code></td>
    <td>Matches all files in any directory starting with BK, recursively. Expands to \verbatim BK*/**\endverbatim.</td>
  </tr>
  <tr>

    <td><code>BK**.h</code></td>
    <td>Matches all *.h files in any directory starting with BK, recursively. Expands to \verbatim BK*/**/*.h\endverbatim.</td>
  </tr>
  <tr>
    <td><code>\verbatim c:/Src/**/*.h\endverbatim</code></td>
    <td>Matches all *.h files recursively, starting at c:/Src/.</td>
  </tr>
  <tr>
    <td><code>\verbatim c:/Src/**/*Grid/\endverbatim</code></td>
    <td>Recursively matches all directories under c:/Src/ that end with Grid.</td>
  </tr>
  <tr>
    <td><code>\verbatim c:/Src/**/*Grid*/\endverbatim</code></td>
    <td>Recursively matches all directories under c:/Src/ that contain Grid.</td>
  </tr>
  <tr>
    <td><code>\verbatim c:/Src/**/*Grid*/**/ABC/**/Readme.txt\endverbatim</code></td>

    <td>Recursively matches all directories under c:/Src/ that contain Grid. From the found directory, recursively matches directories until ABC/ is found. From there, the file <i>Readme.txt</i> is searched for recursively. </td>
  </tr>
</table>

<p>Finally, a couple flags are available. Flags are appended at the end of the pattern line. Each flag begins with an @ character. Spaces should not be inserted between flags unless they are intended as part of the string literal.</p>

<table border="1" width="75%" align="center">
  <tr>
    <td width="150"><b>Flags and Other Expansions</b></td>
    <td width="450"><b>Description</b></td>
  </tr>
  <tr>
    <td><code>@*</code></td>
    <td>Search files and directories recursively.</td>
  </tr>
  <tr>
    <td><code>@-pattern</code></td>
    <td>Adds <code>pattern</code> to the file ignore list. Any file matching a pattern in the file ignore list is removed from the search.</td>
  </tr>
  <tr>
    <td><code>@-pattern/</code></td>
    <td>Adds <code>pattern/</code> to the directory ignore list. Any directory matching a pattern in the directory ignore list is removed from the search.</td>
  </tr>
  <tr>
    <td><code>@=pattern</code></td>
    <td>Adds <code>pattern</code> to the exclusive file list. Any file not matching a pattern in the exclusive file list is automatically removed from the search.</td>
  </tr>
  <tr>
    <td><code>@=pattern/</code></td>
    <td>Adds <code>pattern/</code> to the exclusive directory list. Any directory not matching a pattern in the exclusive file list is automatically removed from the search.</td>
  </tr>
  <tr>
    <td>More than two periods for going up parent directories.</td>
    <td>Similar to 4DOS, each period exceeding two periods goes up one additional parent directory. So, a 4 period path expands to <code>../../../.</code></td>
  </tr>
</table>

Wildcards may appear anywhere in the pattern, including directories.

    \verbatim */*/*/*.c\endverbatim

Note that *.* only matches files that have an extension.  This is different than standard DOS behavior.  Use * all by itself to match files, extension or not.

Recursive wildcards can be used anywhere:

    \verbatim c:/Dir1/**/A*/**/FileDirs*/**.mp3\endverbatim

This matches all directories under c:/Dir1/ that start with A.  Under all of the directories that start with A, directories starting with FileDirs are matched recursively.  Finally, all files ending with an mp3 extension are matched.

<p>And a few examples:</p>

<table border="1" width="75%" align="center">
  <tr>
    <td width="150"><b>Example Pattern</b></td>
    <td width="450"><b>Description</b></td>
  </tr>
  <tr>
    <td><code>\verbatim Src/**/@-.git/@-.svn/\endverbatim</code></td>
    <td>Recursively lists all directories under Src/, but directories called .git/ and .svn/ are filtered.</td>
  </tr>
  <tr>
    <td><code>\verbatim Src/**@=*.lua@=README\endverbatim</code></td>
    <td>Recursively lists all files under Src/ which match *.lua or README. All other files are ignored.</td>
  </tr>
  <tr>
    <td><code>\verbatim Src/**/@-.git/@-.svn/@=*.lua@=README\endverbatim</code></td>
    <td>Recursively lists all files under Src/ which match *.lua or README. The versions of those files that may exist in .git/ or .svn/ are ignored.</td>
  </tr>
  <tr>
    <td><code>\verbatim ...../StartSearchHere/**\endverbatim</code></td>
    <td>Expands to: \verbatim ../../../../StartSearchHere/**\endverbatim</td>
  </tr>
</table>








\section variable_expansion_examples Variable Expansion Examples

\code
    var = ab cd ef gh ij kl ;

    Echo $(var) ;                     # ab cd ef gh ij kl
    Echo $(var[0]) ;                  # ab
    Echo $(var[2]) ;                  # cd
    Echo $(var[6]) ;                  # kl
    Echo $(var[7]) ;                  #

    Echo $(var[1-]) ;                 # ab cd ef gh ij kl
    Echo $(var[2-]) ;                 # cd ef gh ij kl
    Echo $(var[6-]) ;                 # kl
    Echo $(var[7-]) ;                 #

    Echo $(var[1-7]) ;                # ab cd ef gh ij kl
    Echo $(var[2-6]) ;                # cd ef gh ij kl
    Echo $(var[3-5]) ;                # ef gh ij
    Echo $(var[6-4]) ;                # kl

    #------------------------------------------------------------------------------
    Echo $(VAR:E=**empty**) ;         # empty

    EMPTY_TEXT = some empty text ;
    Echo $(VAR:E=$(EMPTY_TEXT)) ;     # some empty text

    #------------------------------------------------------------------------------
    list = list of characters to put stuff in between ;
    local var1 = $ ;
    local var2 = (list) ;
    local var1_var2 = $(var1)$(var2) ;
    Echo $(var1_var2) ;               # $(list)
    Echo $(var1_var2:A) ;             # list of characters to put stuff in between
    Echo @($(var1)$(var2):A) ;        # list of characters to put stuff in between

    #------------------------------------------------------------------------------
    FILE = somefile.txt ;
    Echo $(FILE:T) ;                  # somefile.txt

    LOCATE on $(FILE) = /somewhere/on/the/hard/drive ;
    Echo $(FILE:T) ;                  # /somewhere/on/the/hard/drive/somefile.txt

    BINDING on $(FILE) = newname.txt ;
    Echo $(FILE:T) ;                  # /somewhere/on/the/hard/drive/newname.txt

    BINDING on $(FILE) = ;
    SEARCH on $(FILE) = data ;
    LOCATE on $(FILE) = /somewhere/on/the/hard/drive ;
    Echo $(FILE:T) ;                  # /somewhere/on/the/hard/drive/somefile.txt

    LOCATE on $(FILE) = ;
    Echo $(FILE:T) ;                  # data/somefile.txt

    #------------------------------------------------------------------------------
    FILENAME = <thegrist>c:/some/directory/filename.txt ;
    Echo $(FILENAME:B) ;              # filename
    Echo $(FILENAME:B=anothername) ;  # <thegrist>c:/some/directory/anothername.txt
    Echo $(FILENAME:S) ;              # .txt
    Echo $(FILENAME:S=.dat) ;         # <thegrist>c:/some/directory/filename.dat
    Echo $(FILENAME:BS) ;             # filename.txt
    Echo $(FILENAME:B=anothername:S=.dat) ;  # <thegrist>c:/some/directory/anothername.dat
    Echo $(FILENAME:D) ;              # c:/some/directory
    Echo $(FILENAME:D=/usr/bin) ;     # <thegrist>/usr/bin/filename.txt
    Echo $(FILENAME:P) ;              # <thegrist>c:/some/directory
    Echo @($(FILENAME:P):P) ;         # <thegrist>c:/some

    Echo $(FILENAME:G) ;              # <thegrist>
    Echo $(FILENAME:G=anothergrist) ; # <anothergrist>c:/some/directory/filename.txt

    NEW_ROOT = d:/root/directory ;
    Echo $(FILENAME:R="d:/root/directory") ; # <thegrist>c:/some/directory/filename.txt
    Echo @(filename.txt:R=$(NEW_ROOT)) ;     # d:/root/directory/filename.txt

    Echo @(lowercase_now_uppercase:U) ;      # LOWERCASE_NOW_UPPERCASE
    Echo @(UPPERCASE_NOW_LOWERCASE:L) ;      # uppercase_now_lowercase ;

    Echo @(backslash\\path\\:/) ;            # backslash/path/
    Echo $(FILENAME:\\) ;                    # <thegrist>c:\\some\\directory\\filename.txt

    Echo $(FILENAME:DBS) ;                   # c:/some/directory/filename.txt

    VAR = /home/stuff/file.txt ;
    Echo $(VAR:DB:U) ;                       # /HOME/STUFF/FILE

    #------------------------------------------------------------------------------
    # Assuming ../sharedlib/app has the files Jamfile.jam and main.c:
    Echo @(../sharedlib/app/*:WBS) ;         # Jamfile.jam main.c
    Echo @(@(../sharedlib/app/*:W):BS) ;     # Jamfile.jam main.c

    Echo @(../sharedlib/app/**:WB=more\\dir\\file:\\) ;
                                            # ..\\sharedlib\\app\\more\\dir\\file.jam
                                            # ..\\sharedlib\\app\\more\\dir\\file.c

    Echo @(../sharedlib/app/**:W=../sharedlib/:B=more\\dir\\file:\\) ;
                                            # app\\more\\dir\\file.jam
                                            # app\\more\\dir\\file.c


    #------------------------------------------------------------------------------
    top = AppRoot ;
    jamfile = Jamfile.jam ;
    Echo included_$(top:J=_)_$(jamfile) ;    # included_AppRoot_Jamfile.jam

    #------------------------------------------------------------------------------
    top = AppRoot With Directories ;
    jamfile = SomeFile.jam ;
    Echo included_$(top:J=_)_$(jamfile) ;    # included_AppRoot_With_Directories_SomeFile.jam

    #------------------------------------------------------------------------------
    Echo $(list:J=!) ;                # list!of!characters!to!put!stuff!in!between

    #------------------------------------------------------------------------------
    FILES = file1.c file2.c file3.c file1.h file2.h file3.h file1.obj file2.obj file3.obj ;
    Echo $(FILES:I=\\.c$) ;           # file1.c file2.c file3.c

    Echo $(FILES:I=\\.c$:I=\\.obj:X="^file1") ;
                                    # file2.c file3.c file2.obj file3.obj

    Echo $(FILES:I=\\.c$:I=\\.obj:X="^file1":X=\\.c$:I=\\.c$) ;
                                    # file1.c file2.c file3.c file2.obj file3.obj

    Echo $(FILES:I=\\.c$:I=\\.obj:X="^file1":X=\\.c$) ;
                                    # file2.obj file3.obj

    Echo $(FILES:X="^file1":X=\\.obj$:I=\\.h$) ;
                                    # file1.h file2.h file3.h
\endcode


*/

