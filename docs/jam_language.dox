/*! \page jam_language Jam Language

\section cmd_intro Introduction

\section operation_main Operation

Jam has four phases of operation: start-up, parsing, binding, and updating.

\subsection operation_start-up Start-up Phase

Upon start-up, Jam imports environment variable settings into Jam variables. Environment variables are split at blanks with each word becoming an element in the variable's list of values. Environment variables whose names end in \c PATH are split at \$(SPLITPATH) characters (e.g., <tt>";"</tt> for Windows and <tt>":"</tt> for Unix).

To set a variable's value on the command line, overriding the variable's environment value, use a <tt>KEY=VALUE</tt> syntax.

(To see variable assignments made during jam's execution, use the <tt>-d+7</tt> option.)

\subsection operation_parsing Parsing Phase

In the parsing phase, \b Jam reads and executes the <tt>Jambase.jam</tt> file.  It finds a <tt>Jambase.jam</tt> file by looking for one in the current working directory.  If the <tt>Jambase.jam</tt> is not found in the current directory, the <tt>Jambase.jam</tt> sitting side-by-side with or one level up from the \b Jam executable is read in.

The \c Jambase file is written in the \b Jam \ref language_main. The last action of the \c Jambase is to read (via the "include" rule) a user-provided file called &quot;<tt>Jamfile.jam</tt>&quot;.

Collectively, the purpose of the \c Jambase and the \c Jamfile is to name built target and source files, construct the dependency graph among them, and associate build actions with targets. The \c Jambase defines boilerplate rules and variable assignments, and the \c Jamfile uses these to specify the actual relationship among the target and source files. See the \ref jambase_rules document for information.





\subsection operation_binding Binding Phase

\subsubsection operation_binding_binding Binding

 parsing, \b Jam recursively descends the dependency graph and binds every file target with a location in the filesystem.

\subsubsection operation_binding_targets Targets

Any string value in \b Jam can represent a target, and it does so if the \ref rule_Depends "Depends", \ref rule_Includes "Includes", or \ref rule_Needs "Needs" rules make it part of the dependency graph. <i>Build targets</i> are files to be updated. <i>Source targets</i> are the files used in updating build targets. Build targets and source targets are collectively referred to as file targets, and frequently build targets are source targets for other build targets. <i>Pseudotargets</i> are symbols which represent dependencies on other targets, but which are not themselves associated with any real file.

A file target's identifier is generally the file's name, which can be absolutely rooted, relative to the directory of jam's invocation, or simply local (no directory). Most often it is the last case, and the actual file path is bound using the \$(BINDING), \$(SEARCH), and \$(LOCATE) special variables. See \ref built_in_variables_binding_binding_search_locate. A local filename is optionally qualified with "grist," a string value used to assure uniqueness. A file target with an identifier of the form <i>file(member)</i> is a library member (usually an ar(1) archive on UNIX).

The use of \$(BINDING), \$(SEARCH), and \$(LOCATE) allows \b Jam to separate the the location of files from their names, so that Jamfiles can refer to files locally (i.e. relative to the Jamfile's directory), yet still be usable when \b Jam is invoked from a distant directory. The use of grist allows files with the same name to be identified uniquely, so that \b Jam can read a whole directory tree of Jamfiles and not mix up same-named targets.

\subsubsection operation_binding_update_determination Update Determination

After binding each target, \b Jam determines whether the target needs updating, and, if so, marks the target for the updating phase. A target is normally so marked if it is missing, checksum command line flags have changed, is older than any of its sources, or any of its sources are marked for updating. This behavior can be modified by the application of special built-in rules. See \ref language_built_in_rules_modifying_binding.

\subsubsection operation_binding_header_file_scanning Header File Scanning

During the binding phase, \b Jam also performs \"header\" file scanning, where it looks inside source files for the implicit dependencies on other files caused by C's \#include syntax (or whatever is appropriate for other file formats). This is controlled by the special variables \$(HDRSCAN) and \$(HDRRULE). The result of the scan is formed into a rule invocation, with the scanned file as the target and the found included file names as the sources. Note that this is the only case where rules are invoked outside the parsing phase. See \ref built_in_variables_hdrscan.


\subsection operation_updating Updating Phase

After binding, \b Jam again recursively descends the dependency graph, this time executing the update actions for each target marked for update during the binding phase. If a target's updating actions fail, then all other targets which depend on that target are skipped.

The <tt>-j</tt> flag instructs jam to build more than one target at a time. If there are multiple actions on a single target, they are run sequentially. The <tt>-g</tt> flag reorders builds so that targets with newest sources are built first. Normally, they are built in the order of appearance in the Jamfiles.


<hr>
\section language_main Language

\subsection language_overview Overview

Jam has a interpreted, procedural language with a few select features to effect program construction. Statements in jam are rule (procedure) definitions, rule invocations, updating action definitions, flow-of-control structures, variable assignments, and sundry language support.



\subsection language_lexical_features Lexical Features

\b Jam treats its input files as whitespace-separated tokens, with a few exceptions: double quotes (\\") can enclose whitespace to embed it into a token; the special syntax starting with an open brace followed by an equals sign followed by an open brace and closed in the same manner but with closing braces is treated as a single string; and everything between the matching curly braces ({}) in the definition of a updating actions is treated as a single string. A backslash (\) can escape a double quote, or any single whitespace character. Both a newline and a tab must be represented physically within quotes. There is no backslash escape for them.

\b Jam requires whitespace (blanks, tabs, or newlines) to surround all tokens, <b>including the colon (:) and semicolon (;) tokens</b>.  If a colon or semicolon is found and is not surrounded by whitespace, an error is raised unless the colon or semicolon and surrounding content is in double quotes.

\code
# Parses successfully.
MyRule arg1 : arg2 : arg3 ;

# Does not parse due to the colon at the end of Error.
Echo Error: This won't work! ;

# Parses successfully.
Echo "Error: This works fine!" ;

# Prints:
#
# ARGS = my-args
ARGS = my-args ;
Echo "ARGS = $(ARGS)" ;

# Prints:
#
# ARGS = $(ARGS)
ARGS = my-args ;
Echo {={ARGS = $(ARGS)}=} ;
\endcode

\b Jam keywords (as mentioned in this document) are reserved and generally must be quoted with double quotes (\") to be used as arbitrary tokens, such as variable or target names.



\subsection language_datatype Datatype

<b>Jam</b>'s only data type is a one-dimensional list of arbitrary strings. They are populated as literal (whitespace-separated) tokens in the Jambase or included files, as the result of variable expansion of those tokens, or as the return value from a rule invocation.

\code
variableName = hello ;
listOfStrings = hello hi bonjour hola! "how are you?" {={Not expanded: $(variableName)}=} "Expanded: $(variableName)" "i am fine." ;
\endcode



\subsection language_rules Rules

The basic \b Jam language entity is called a rule. A rule is simply a procedure definition, with a body of \b Jam statements to be run when the rule is invoked. The syntax of rule invocation make it possible to write Jamfiles that look a bit like Makefiles.

Rules take up to 9 arguments (\$(1) through \$(9), each a list) and can have a return value (a single list). A rule's return value can be expanded in a list by enclosing the rule invocation with [ and ].

Rule names can be expanded in place using the same techniques as described in \ref language_variable_expansion.

\code
    FLAG = Dirty ; # or Clean

    rule MarkDirty
    {
    }

    rule MarkClean
    {
    }

    # Calls MarkDirty
    Mark$(FLAG) ;
\endcode



\subsection language_updating_actions Updating Actions

A rule may have updating actions associated with it, in which case arguments \$(1) and \$(2) are treated as built targets and sources, respectively. Updating actions are the OS shell commands to execute when updating the built targets of the rule.

When a rule with updating actions is invoked, those actions are added to those associated with its built targets (\$(1)) before the rule's procedure is run. Later, to build the targets in the updating phase, the actions are passed to the OS command shell, with \$(1) and \$(2) replaced by bound versions of the target names. See \ref operation_binding above.



\subsection language_statements Statements
\anchor actions_autosettings
\anchor actions_lua
\anchor actions_removeemptydirs
\anchor actions_screenoutput

<tt>Jam</tt>'s language has the following statements:

\htmlonly <blockquote> \endhtmlonly

<tt><i>rulename</i> <i>field1</i> : <i>field2</i> : ... : <i>fieldN</i> ;</tt>

\htmlonly <blockquote> \endhtmlonly

Invoke a rule. A rule is invoked with values in \em field1 through \em fieldN (9 max). They may be referenced in the procedure's \em statements as $(1) through $(<9>N). $(<) and $(>) are synonymous with $(1) and $(2).

\em rulename undergoes \ref language_variable_expansion. If the resulting list is more than one value, each rule is invoked with the same arguments, and the result of the invocation is the concatenation of all the results.

\htmlonly </blockquote> \endhtmlonly


<tt>actions [ <i>modifiers</i> ] <i>rulename</i> { <i>commands</i> }</tt>

\htmlonly <blockquote> \endhtmlonly

Define a rule's updating actions, replacing any previous definition. The first two arguments may be referenced in the action's \em commands as $(1) and $(2) or $(<) and $(>).

Normally, the settings from $(1) are made active during the run of the action.  Sometimes, it is useful to make additional settings available.  If a third optional argument is provided, the settings assigned to the third target are activated during the action.  $(1)'s settings take precedence over the third argument.

Example:

\code
# tests/autosettings
the_echo on myshell = echo ;

actions DoEcho
{
	echo $(the_echo) $(the_string) hello everyone
}

# the_echo on myshell = echo
# the_string =
#
# Prints: echo  hello everyone
DoEcho all : : myshell ;

# the_echo on myshell = echo
# the_string = ***********
#
# Prints: echo *********** hello everyone
Depends all : all2 ;
the_string on all2 = *********** ;
DoEcho all2 : : myshell ;

# the_echo on myshell = echo
# the_echo on all3 = =====
# the_string =
#
# Prints: =====  hello everyone
Depends all : all3 ;
the_echo on all3 = "=====" ;
DoEcho all3 : : myshell ;
\endcode

The following action \em modifiers are understood:

<table>
  <tr>
    <td><tt>actions bind vars</tt> (deprecated)</td>
 	<td>\$(vars) will be replaced with bound values.  The preferred way to expand a bound value in JamPlus is to use the <tt>:T</tt> variable expansion modifier like so: <tt>\$(vars:T)</tt></td>
  </tr>
  <tr>
    <td><tt>actions existing</tt></td>
 	<td>\$(>) includes only source targets currently existing.</td>
  </tr>
  <tr>
    <td><tt>actions ignore</tt></td>
    <td>The return status of the \em commands is ignored.</td>
  </tr>
  <tr>
    <td><tt>actions lua</tt></td>
    <td>Flags this action contains embedded Lua script that is executed in a thread local to the running Jam process.  For more information, see \ref lua_support_actions.</td>
  </tr>
  <tr>
    <td><tt>actions maxtargets #</tt></td>
    <td>When batching files through the action, using \c maxtargets limits the number of source files passed to the action's command each time.</td>
  </tr>
  <tr>
    <td><tt>actions piecemeal</tt></td>
    <td>\em commands are repeatedly invoked with a subset of \$(>) small enough to fit in the command buffer on this OS.</td>
  </tr>
  <tr>
    <td><tt>actions quietly</tt></td>
    <td>The action is not echoed to the standard output.</td>
  </tr>
  <tr>
    <td><tt>actions removeemptydirs</tt></td>
    <td>Although useful in other circumstances, \c removeemptydirs is primarily intended to be used with the various Clean actions.  For any sources sent to an action using \c removeemptydirs, any empty directories associated with the source target location are removed.
  <tr>
    <td><tt>actions response</tt></td>
    <td>Enables automatically generated response files.  Response files store text surrounded by <tt>@@(text...)</tt> into a temporary response file.  The <tt>@@(text)</tt> in the action is replaced with the full path to the temporary response file.

\code
actions response C++
{
    $(C++) @@($(2))
}
\endcode

It is valid to nest the generation of response files.  In the example below, the file list is written to a temporary response file and the filename is inserted in the place of <tt>@($(2))</tt>.  In a secondary response file, the <tt>-filelist</tt> parameter and the first response filename are added.  This response filename is then passed to the C++ compiler.


\code
actions response C++
{
    $(C++) @@(-filelist @($(2)))
}
\endcode

Note that <tt>\$@(...)</tt> and <tt>@\$(...)</tt> are synonomous.

Additionally, the <tt>response</tt> modifier may be removed if the <tt>^^^(...)</tt> syntax is used:

\code
actions C++
{
    $(C++) @^^^(-filelist @($(2)))
}
\endcode
    </td>
  </tr>
  <tr>
    <td><tt>actions screenoutput</tt></td>
	<td>Normally, actions collect all output before displaying it to the user in order to avoid interleaving the output from
different processes.  'screenoutput' may be used to display the output as it happens.  It will be more difficult to follow multiprocess output, but during some long running actions, the user may need faster visual response.</td>
  </tr>
  <tr>
    <td><tt>actions together</tt></td>
	<td>The \$(>) from multiple invocations of the same action on the same built target are concatenated together.</td>
  </tr>
  <tr>
    <td><tt>actions updated</tt></td>
	<td>\$(>) includes only source targets themselves marked for updating.</td>
  </tr>
</table>

Two other sets of symbols are understood within the body of the action.

The first is used to write a file to disk based on the contents of an available variable.

\code
    # Write a file to disk
    actions WriteFile
    {
        ^^($(1)|$(CONTENTS))
    }
\endcode

The second is used to write a response file to disk.  Response files store text surrounded by <tt>^^^(text...)</tt> into a temporary response file.  The <tt>^^^(text)</tt> in an action is replaced with the full path to the temporary response file.  The response file is deleted when the action completes.

\code
actions C++
{
    $(C++) @^^^($(2))
}
\endcode

It is valid to nest the generation of response files.  In the example below, the file list is written to a temporary response file and the filename is inserted in the place of <tt>^^^($(2))</tt>.  In a secondary response file, the <tt>-filelist</tt> parameter and the first response filename are added.  This response filename is then passed to the C++ compiler.


\code
actions response C++
{
    $(C++) @^^^(-filelist ^^^($(2)))
}
\endcode


\htmlonly </blockquote> \endhtmlonly



<tt>break</tt>

\htmlonly <blockquote> \endhtmlonly

Breaks out of the closest enclosing \em for or \em while loop.

\htmlonly </blockquote> \endhtmlonly




<tt>continue</tt>

\htmlonly <blockquote> \endhtmlonly

Jumps to the end of the closest enclosing \em for or \em while loop.

\htmlonly </blockquote> \endhtmlonly




<tt>for <i>var</i> in <i>list</i> { <i>statements</i> }</tt>

\htmlonly <blockquote> \endhtmlonly

Executes \em statements for each element in \em list, setting the variable \em var to the element value.

\htmlonly </blockquote> \endhtmlonly




<tt>if <i>cond</i> { <i>statements</i> } [ else <i>statement</i> ] </tt>

\htmlonly <blockquote> \endhtmlonly

Does the obvious; the else clause is optional. \em cond is built of:

<table BORDER=1>
  <tr>
    <td width=25%><code>\em a</code></td>
    <td> true if any \em a element is a non-zero-length string</td>
  </tr>
  <tr>
    <td><code>\em a = \em b</code></td>
    <td>list \em a matches list \em b string-for-string</td>
  </tr>
  <tr>
    <td><code>\em a != \em b</code></td>
    <td>list \em a does not match list \em b</td>
  </tr>
  <tr>
    <td><code>\em a &lt; \em b </code></td>
    <td><i>a[i]</i> string is less than <i>b[i]</i> string, where \em i is first mismatched element in lists \em a and \em b</td>
  </tr>
  <tr>
    <td><code>\em a &lt;= \em b</code></td>
    <td> every \em a string is less than or equal to its \em b counterpart</td>
  </tr>
  <tr>
    <td><code>\em a &gt; \em b</code></td>
    <td><i>a[i]</i> string is greater than <i>b[i]</i> string, where \em i is first mismatched element</td>
  </tr>
  <tr>
    <td><code>\em a &gt;= \em b</code></td>
    <td>every \em a string is greater than or equal to its \em b counterpart</td>
  </tr>
  <tr>
    <td><code>\em a in \em b</code></td>
    <td>true if all elements of \em a can be found in \em b, or if \em a has no elements</td>
  </tr>
  <tr>
    <td><code>! \em cond</code></td>
    <td>condition not true</td>
  </tr>
  <tr>
    <td><code>\em cond && \em cond </code></td>
    <td>logical and</td>
  </tr>
  <tr>
    <td><code>\em cond || \em cond</code></td>
    <td>logical or</td>
  </tr>
  <tr>
    <td><code>( \em cond )</code></td>
    <td> precedence grouping</td>
</table>

\htmlonly </blockquote> \endhtmlonly




<tt>include file ;</tt>

\htmlonly <blockquote> \endhtmlonly

Causes \b Jam to read the named file. The file is bound like a regular target (see \ref operation_binding above) but unlike a regular target, the include file cannot be built. Marking an include file target with the \ref rule_NoCare rule makes it optional: if it is missing, it causes no error.

The include file is inserted into the input stream during the parsing phase. The primary input file and all the included file(s) are treated as a single file; that is, \b Jam infers no scope boundaries from included files.

\htmlonly </blockquote> \endhtmlonly




<tt>local \em vars [ = \em values ] ;</tt>

\htmlonly <blockquote> \endhtmlonly

Creates new \em vars inside to the enclosing {} block, obscuring any previous values they might have.  The previous values for \em vars are restored when the current block ends.  Any rule called or file included will see the local and not the previous value (this is sometimes called Dynamic Scoping).  The local statement may appear anywhere, even outside of a block (in which case the previous value is restored when the input ends).  The \em vars are initialized to \em values if present, or left uninitialized otherwise.

\htmlonly </blockquote> \endhtmlonly




<tt>on \em target \em statement ;</tt>

\htmlonly <blockquote> \endhtmlonly

Run \em statement under the influence of <i>target</i>'s target-specific variables.  These variables become local copies during <i>statement</i>'s run, but they may be updated as target-specific variables using the usual &quot;\em variable on \em targets =&quot; syntax.

\htmlonly </blockquote> \endhtmlonly




<tt>return \em values ;</tt>

\htmlonly <blockquote> \endhtmlonly

Within a rule body, the return statement sets the return value for an invocation of the rule and terminates the rule's execution.

\htmlonly </blockquote> \endhtmlonly




<tt>rule \em rulename [ : \em vars ] { \em statements }</tt>

\htmlonly <blockquote> \endhtmlonly

Define a rule's procedure, replacing any previous definition.  If \em vars are provided, they are assigned the values of the parameters (\$(1) to \$(9)) when \em statements are executed, as with the \b local statement.

\htmlonly </blockquote> \endhtmlonly




\anchor statements_switch
<tt>
switch \em value<br>
{<br>
case \em pattern1 : \em statements ;<br>
case \em pattern2 : \em statements ;<br>
...<br>
}
</tt>

\htmlonly <blockquote> \endhtmlonly

The switch statement executes zero or one of the enclosed <i>statements</i>, depending on which, if any, is the first case whose \em pattern matches \em value.  The \em pattern values are not variable-expanded.  The \em pattern values may include the following wildcards:

<table>
  <tr>
    <td><code>?</code></td>
	<td>match any single character</td>
  </tr>
  <tr>
    <td><code>*</code></td>
	<td>match zero or more characters</td>
  </tr>
  <tr>
    <td><code>[<i>chars</i>]</code></td>
	<td>match any single character in \em chars</td>
  </tr>
  <tr>
    <td><code>[^<i>chars</i>]</code></td>
	<td>match any single character not in <i>chars</i></td>
  </tr>
  <tr>
    <td><code>\\<i>x</i></code></td>
    <td>match <i>x</i> (escapes the other wildcards)</td>
  </tr>
</table>

\htmlonly </blockquote> \endhtmlonly




<tt>while \em cond { \em statements }</tt>

\htmlonly <blockquote> \endhtmlonly

Repeatedly execute \em statements while \em cond remains true upon entry. (See the description of \em cond expression syntax under if above).

\htmlonly </blockquote> \endhtmlonly

\htmlonly </blockquote> \endhtmlonly


*/

